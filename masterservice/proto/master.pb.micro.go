// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: master.proto

package go_micro_srv_master

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MasterService service

func NewMasterServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MasterService service

type MasterService interface {
	CreateCompany(ctx context.Context, in *RequestCompany, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateCompany(ctx context.Context, in *RequestCompany, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteCompany(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	CreateAddressType(ctx context.Context, in *RequestAddressType, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateAddressType(ctx context.Context, in *RequestAddressType, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteAddressType(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetAddressTypeById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseAddressType, error)
	GetAddressTypeByName(ctx context.Context, in *RequestByName, opts ...client.CallOption) (*ResponseAddressType, error)
	GetAllAddressTypes(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseAddressType, error)
	GetAllAddressTypeNames(ctx context.Context, in *RequestByName, opts ...client.CallOption) (*ResponseAddressType, error)
	CreateRegion(ctx context.Context, in *RequestRegion, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateRegion(ctx context.Context, in *RequestRegion, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteRegion(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetAllRegion(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseRegion, error)
	GetRegionById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseRegion, error)
	GetRegionByName(ctx context.Context, in *RequestByName, opts ...client.CallOption) (*ResponseRegion, error)
	CreateState(ctx context.Context, in *RequestState, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateState(ctx context.Context, in *RequestState, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteState(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetStateById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseState, error)
	GetStateByCountryId(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseState, error)
	GetStateByName(ctx context.Context, in *RequestByName, opts ...client.CallOption) (*ResponseState, error)
	GetAllStates(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseState, error)
	CreateContact(ctx context.Context, in *RequestContact, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateContact(ctx context.Context, in *RequestContact, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteContact(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	ContactById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseContact, error)
	CreateAddress(ctx context.Context, in *RequestAddress, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateAddress(ctx context.Context, in *RequestAddress, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteAddress(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetAddressById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseAddress, error)
	GetAddressByName(ctx context.Context, in *RequestByName, opts ...client.CallOption) (*ResponseAddress, error)
	CreateFleet(ctx context.Context, in *RequestFleet, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateFleet(ctx context.Context, in *RequestFleet, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteFleet(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetFleetById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseFleet, error)
	CreateFleetContact(ctx context.Context, in *RequestFleetContact, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateFleetContact(ctx context.Context, in *RequestFleetContact, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteFleetContact(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetContactByFleetId(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseFleetContact, error)
	CreateFleetLocation(ctx context.Context, in *RequestFleetLocation, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateFleetLocation(ctx context.Context, in *RequestFleetLocation, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteFleetLocation(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetLocationByFleetId(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseFleetLocation, error)
	CreateOperator(ctx context.Context, in *RequestOperator, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateOperator(ctx context.Context, in *RequestOperator, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteOperator(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetOperatorById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseOperator, error)
	GetOperatorsByVehicleId(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseOperator, error)
	CreateOperatorContact(ctx context.Context, in *RequestOperatorContact, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateOperatorContact(ctx context.Context, in *RequestOperatorContact, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteOperatorContact(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetAllContactsByOperator(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseOperatorContacts, error)
	CreateOperatorLocation(ctx context.Context, in *RequestOperatorLocation, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateOperatorLocation(ctx context.Context, in *RequestOperatorLocation, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteOperatorLocation(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetOperatorLocationByOperator(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseOperatorLocation, error)
	CreateVehicle(ctx context.Context, in *RequestVehicle, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateVehicle(ctx context.Context, in *RequestVehicle, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteVehicle(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetVehicleById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicle, error)
	GetVehicleByRegistration(ctx context.Context, in *RequestByName, opts ...client.CallOption) (*ResponseVehicle, error)
	GetVehiclesByFleetId(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicle, error)
	CreateVehicleHistory(ctx context.Context, in *RequestVehicleHistory, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateVehicleHistory(ctx context.Context, in *RequestVehicleHistory, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteVehicleHistory(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetVehicleHistoryByVehicleId(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicleHistory, error)
	CreateVehicleLocation(ctx context.Context, in *RequestVehicleAddress, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateVehicleLocation(ctx context.Context, in *RequestVehicleAddress, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteVehicleLocation(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetVehicleLocationByVehicle(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicleAddress, error)
	CreateVehicleMake(ctx context.Context, in *RequestVehicleMake, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateVehicleMake(ctx context.Context, in *RequestVehicleMake, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteVehicleMake(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetAllVehicleMake(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseVehicleMake, error)
	GetVehicleMakeById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicleMake, error)
	CreateVehicleModel(ctx context.Context, in *RequestVehicleModel, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateVehicleModel(ctx context.Context, in *RequestVehicleModel, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteVehicleModel(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetAllModelByMake(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicleModel, error)
	GetModelById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicleModel, error)
	CreateVehicleReg(ctx context.Context, in *RequestVehicleReg, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateVehicleReg(ctx context.Context, in *RequestVehicleReg, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteVehicleReg(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetAllRegistrationsByVehicleId(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicleReg, error)
	GetActiveRegistrationsByVehicleId(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicleReg, error)
	CreateVehicleStatus(ctx context.Context, in *RequestVehicleStatus, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateVehicleStatus(ctx context.Context, in *RequestVehicleStatus, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteVehicleStatus(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
	GetAllVehicleStatus(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseVehicleStatus, error)
	CreateVehicleOpBound(ctx context.Context, in *RequestVehicleOprBound, opts ...client.CallOption) (*ResponseCreateSuccess, error)
	UpdateVehicleOpBound(ctx context.Context, in *RequestVehicleOprBound, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteVehicleOpBound(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error)
}

type masterService struct {
	c    client.Client
	name string
}

func NewMasterService(name string, c client.Client) MasterService {
	return &masterService{
		c:    c,
		name: name,
	}
}

func (c *masterService) CreateCompany(ctx context.Context, in *RequestCompany, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateCompany", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateCompany(ctx context.Context, in *RequestCompany, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateCompany", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteCompany(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteCompany", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateAddressType(ctx context.Context, in *RequestAddressType, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateAddressType", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateAddressType(ctx context.Context, in *RequestAddressType, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateAddressType", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteAddressType(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteAddressType", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetAddressTypeById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseAddressType, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetAddressTypeById", in)
	out := new(ResponseAddressType)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetAddressTypeByName(ctx context.Context, in *RequestByName, opts ...client.CallOption) (*ResponseAddressType, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetAddressTypeByName", in)
	out := new(ResponseAddressType)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetAllAddressTypes(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseAddressType, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetAllAddressTypes", in)
	out := new(ResponseAddressType)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetAllAddressTypeNames(ctx context.Context, in *RequestByName, opts ...client.CallOption) (*ResponseAddressType, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetAllAddressTypeNames", in)
	out := new(ResponseAddressType)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateRegion(ctx context.Context, in *RequestRegion, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateRegion", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateRegion(ctx context.Context, in *RequestRegion, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateRegion", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteRegion(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteRegion", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetAllRegion(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseRegion, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetAllRegion", in)
	out := new(ResponseRegion)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetRegionById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseRegion, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetRegionById", in)
	out := new(ResponseRegion)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetRegionByName(ctx context.Context, in *RequestByName, opts ...client.CallOption) (*ResponseRegion, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetRegionByName", in)
	out := new(ResponseRegion)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateState(ctx context.Context, in *RequestState, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateState", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateState(ctx context.Context, in *RequestState, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateState", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteState(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteState", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetStateById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseState, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetStateById", in)
	out := new(ResponseState)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetStateByCountryId(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseState, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetStateByCountryId", in)
	out := new(ResponseState)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetStateByName(ctx context.Context, in *RequestByName, opts ...client.CallOption) (*ResponseState, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetStateByName", in)
	out := new(ResponseState)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetAllStates(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseState, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetAllStates", in)
	out := new(ResponseState)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateContact(ctx context.Context, in *RequestContact, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateContact", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateContact(ctx context.Context, in *RequestContact, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateContact", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteContact(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteContact", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) ContactById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseContact, error) {
	req := c.c.NewRequest(c.name, "MasterService.ContactById", in)
	out := new(ResponseContact)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateAddress(ctx context.Context, in *RequestAddress, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateAddress", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateAddress(ctx context.Context, in *RequestAddress, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateAddress", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteAddress(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteAddress", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetAddressById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseAddress, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetAddressById", in)
	out := new(ResponseAddress)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetAddressByName(ctx context.Context, in *RequestByName, opts ...client.CallOption) (*ResponseAddress, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetAddressByName", in)
	out := new(ResponseAddress)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateFleet(ctx context.Context, in *RequestFleet, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateFleet", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateFleet(ctx context.Context, in *RequestFleet, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateFleet", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteFleet(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteFleet", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetFleetById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseFleet, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetFleetById", in)
	out := new(ResponseFleet)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateFleetContact(ctx context.Context, in *RequestFleetContact, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateFleetContact", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateFleetContact(ctx context.Context, in *RequestFleetContact, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateFleetContact", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteFleetContact(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteFleetContact", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetContactByFleetId(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseFleetContact, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetContactByFleetId", in)
	out := new(ResponseFleetContact)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateFleetLocation(ctx context.Context, in *RequestFleetLocation, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateFleetLocation", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateFleetLocation(ctx context.Context, in *RequestFleetLocation, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateFleetLocation", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteFleetLocation(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteFleetLocation", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetLocationByFleetId(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseFleetLocation, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetLocationByFleetId", in)
	out := new(ResponseFleetLocation)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateOperator(ctx context.Context, in *RequestOperator, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateOperator", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateOperator(ctx context.Context, in *RequestOperator, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateOperator", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteOperator(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteOperator", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetOperatorById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseOperator, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetOperatorById", in)
	out := new(ResponseOperator)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetOperatorsByVehicleId(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseOperator, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetOperatorsByVehicleId", in)
	out := new(ResponseOperator)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateOperatorContact(ctx context.Context, in *RequestOperatorContact, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateOperatorContact", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateOperatorContact(ctx context.Context, in *RequestOperatorContact, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateOperatorContact", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteOperatorContact(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteOperatorContact", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetAllContactsByOperator(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseOperatorContacts, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetAllContactsByOperator", in)
	out := new(ResponseOperatorContacts)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateOperatorLocation(ctx context.Context, in *RequestOperatorLocation, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateOperatorLocation", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateOperatorLocation(ctx context.Context, in *RequestOperatorLocation, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateOperatorLocation", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteOperatorLocation(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteOperatorLocation", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetOperatorLocationByOperator(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseOperatorLocation, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetOperatorLocationByOperator", in)
	out := new(ResponseOperatorLocation)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateVehicle(ctx context.Context, in *RequestVehicle, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateVehicle", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateVehicle(ctx context.Context, in *RequestVehicle, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateVehicle", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteVehicle(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteVehicle", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetVehicleById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicle, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetVehicleById", in)
	out := new(ResponseVehicle)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetVehicleByRegistration(ctx context.Context, in *RequestByName, opts ...client.CallOption) (*ResponseVehicle, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetVehicleByRegistration", in)
	out := new(ResponseVehicle)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetVehiclesByFleetId(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicle, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetVehiclesByFleetId", in)
	out := new(ResponseVehicle)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateVehicleHistory(ctx context.Context, in *RequestVehicleHistory, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateVehicleHistory", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateVehicleHistory(ctx context.Context, in *RequestVehicleHistory, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateVehicleHistory", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteVehicleHistory(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteVehicleHistory", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetVehicleHistoryByVehicleId(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicleHistory, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetVehicleHistoryByVehicleId", in)
	out := new(ResponseVehicleHistory)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateVehicleLocation(ctx context.Context, in *RequestVehicleAddress, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateVehicleLocation", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateVehicleLocation(ctx context.Context, in *RequestVehicleAddress, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateVehicleLocation", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteVehicleLocation(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteVehicleLocation", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetVehicleLocationByVehicle(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicleAddress, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetVehicleLocationByVehicle", in)
	out := new(ResponseVehicleAddress)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateVehicleMake(ctx context.Context, in *RequestVehicleMake, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateVehicleMake", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateVehicleMake(ctx context.Context, in *RequestVehicleMake, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateVehicleMake", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteVehicleMake(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteVehicleMake", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetAllVehicleMake(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseVehicleMake, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetAllVehicleMake", in)
	out := new(ResponseVehicleMake)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetVehicleMakeById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicleMake, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetVehicleMakeById", in)
	out := new(ResponseVehicleMake)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateVehicleModel(ctx context.Context, in *RequestVehicleModel, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateVehicleModel", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateVehicleModel(ctx context.Context, in *RequestVehicleModel, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateVehicleModel", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteVehicleModel(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteVehicleModel", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetAllModelByMake(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicleModel, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetAllModelByMake", in)
	out := new(ResponseVehicleModel)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetModelById(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicleModel, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetModelById", in)
	out := new(ResponseVehicleModel)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateVehicleReg(ctx context.Context, in *RequestVehicleReg, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateVehicleReg", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateVehicleReg(ctx context.Context, in *RequestVehicleReg, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateVehicleReg", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteVehicleReg(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteVehicleReg", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetAllRegistrationsByVehicleId(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicleReg, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetAllRegistrationsByVehicleId", in)
	out := new(ResponseVehicleReg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetActiveRegistrationsByVehicleId(ctx context.Context, in *RequestKey, opts ...client.CallOption) (*ResponseVehicleReg, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetActiveRegistrationsByVehicleId", in)
	out := new(ResponseVehicleReg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateVehicleStatus(ctx context.Context, in *RequestVehicleStatus, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateVehicleStatus", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateVehicleStatus(ctx context.Context, in *RequestVehicleStatus, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateVehicleStatus", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteVehicleStatus(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteVehicleStatus", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) GetAllVehicleStatus(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseVehicleStatus, error) {
	req := c.c.NewRequest(c.name, "MasterService.GetAllVehicleStatus", in)
	out := new(ResponseVehicleStatus)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) CreateVehicleOpBound(ctx context.Context, in *RequestVehicleOprBound, opts ...client.CallOption) (*ResponseCreateSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.CreateVehicleOpBound", in)
	out := new(ResponseCreateSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) UpdateVehicleOpBound(ctx context.Context, in *RequestVehicleOprBound, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.UpdateVehicleOpBound", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterService) DeleteVehicleOpBound(ctx context.Context, in *RequestDelete, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "MasterService.DeleteVehicleOpBound", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MasterService service

type MasterServiceHandler interface {
	CreateCompany(context.Context, *RequestCompany, *ResponseCreateSuccess) error
	UpdateCompany(context.Context, *RequestCompany, *ResponseSuccess) error
	DeleteCompany(context.Context, *RequestDelete, *ResponseSuccess) error
	CreateAddressType(context.Context, *RequestAddressType, *ResponseCreateSuccess) error
	UpdateAddressType(context.Context, *RequestAddressType, *ResponseSuccess) error
	DeleteAddressType(context.Context, *RequestDelete, *ResponseSuccess) error
	GetAddressTypeById(context.Context, *RequestKey, *ResponseAddressType) error
	GetAddressTypeByName(context.Context, *RequestByName, *ResponseAddressType) error
	GetAllAddressTypes(context.Context, *empty.Empty, *ResponseAddressType) error
	GetAllAddressTypeNames(context.Context, *RequestByName, *ResponseAddressType) error
	CreateRegion(context.Context, *RequestRegion, *ResponseCreateSuccess) error
	UpdateRegion(context.Context, *RequestRegion, *ResponseSuccess) error
	DeleteRegion(context.Context, *RequestDelete, *ResponseSuccess) error
	GetAllRegion(context.Context, *empty.Empty, *ResponseRegion) error
	GetRegionById(context.Context, *RequestKey, *ResponseRegion) error
	GetRegionByName(context.Context, *RequestByName, *ResponseRegion) error
	CreateState(context.Context, *RequestState, *ResponseCreateSuccess) error
	UpdateState(context.Context, *RequestState, *ResponseSuccess) error
	DeleteState(context.Context, *RequestDelete, *ResponseSuccess) error
	GetStateById(context.Context, *RequestKey, *ResponseState) error
	GetStateByCountryId(context.Context, *RequestKey, *ResponseState) error
	GetStateByName(context.Context, *RequestByName, *ResponseState) error
	GetAllStates(context.Context, *empty.Empty, *ResponseState) error
	CreateContact(context.Context, *RequestContact, *ResponseCreateSuccess) error
	UpdateContact(context.Context, *RequestContact, *ResponseSuccess) error
	DeleteContact(context.Context, *RequestDelete, *ResponseSuccess) error
	ContactById(context.Context, *RequestKey, *ResponseContact) error
	CreateAddress(context.Context, *RequestAddress, *ResponseCreateSuccess) error
	UpdateAddress(context.Context, *RequestAddress, *ResponseSuccess) error
	DeleteAddress(context.Context, *RequestDelete, *ResponseSuccess) error
	GetAddressById(context.Context, *RequestKey, *ResponseAddress) error
	GetAddressByName(context.Context, *RequestByName, *ResponseAddress) error
	CreateFleet(context.Context, *RequestFleet, *ResponseCreateSuccess) error
	UpdateFleet(context.Context, *RequestFleet, *ResponseSuccess) error
	DeleteFleet(context.Context, *RequestDelete, *ResponseSuccess) error
	GetFleetById(context.Context, *RequestKey, *ResponseFleet) error
	CreateFleetContact(context.Context, *RequestFleetContact, *ResponseCreateSuccess) error
	UpdateFleetContact(context.Context, *RequestFleetContact, *ResponseSuccess) error
	DeleteFleetContact(context.Context, *RequestDelete, *ResponseSuccess) error
	GetContactByFleetId(context.Context, *RequestKey, *ResponseFleetContact) error
	CreateFleetLocation(context.Context, *RequestFleetLocation, *ResponseCreateSuccess) error
	UpdateFleetLocation(context.Context, *RequestFleetLocation, *ResponseSuccess) error
	DeleteFleetLocation(context.Context, *RequestDelete, *ResponseSuccess) error
	GetLocationByFleetId(context.Context, *RequestKey, *ResponseFleetLocation) error
	CreateOperator(context.Context, *RequestOperator, *ResponseCreateSuccess) error
	UpdateOperator(context.Context, *RequestOperator, *ResponseSuccess) error
	DeleteOperator(context.Context, *RequestDelete, *ResponseSuccess) error
	GetOperatorById(context.Context, *RequestKey, *ResponseOperator) error
	GetOperatorsByVehicleId(context.Context, *RequestKey, *ResponseOperator) error
	CreateOperatorContact(context.Context, *RequestOperatorContact, *ResponseCreateSuccess) error
	UpdateOperatorContact(context.Context, *RequestOperatorContact, *ResponseSuccess) error
	DeleteOperatorContact(context.Context, *RequestDelete, *ResponseSuccess) error
	GetAllContactsByOperator(context.Context, *RequestKey, *ResponseOperatorContacts) error
	CreateOperatorLocation(context.Context, *RequestOperatorLocation, *ResponseCreateSuccess) error
	UpdateOperatorLocation(context.Context, *RequestOperatorLocation, *ResponseSuccess) error
	DeleteOperatorLocation(context.Context, *RequestDelete, *ResponseSuccess) error
	GetOperatorLocationByOperator(context.Context, *RequestKey, *ResponseOperatorLocation) error
	CreateVehicle(context.Context, *RequestVehicle, *ResponseCreateSuccess) error
	UpdateVehicle(context.Context, *RequestVehicle, *ResponseSuccess) error
	DeleteVehicle(context.Context, *RequestDelete, *ResponseSuccess) error
	GetVehicleById(context.Context, *RequestKey, *ResponseVehicle) error
	GetVehicleByRegistration(context.Context, *RequestByName, *ResponseVehicle) error
	GetVehiclesByFleetId(context.Context, *RequestKey, *ResponseVehicle) error
	CreateVehicleHistory(context.Context, *RequestVehicleHistory, *ResponseCreateSuccess) error
	UpdateVehicleHistory(context.Context, *RequestVehicleHistory, *ResponseSuccess) error
	DeleteVehicleHistory(context.Context, *RequestDelete, *ResponseSuccess) error
	GetVehicleHistoryByVehicleId(context.Context, *RequestKey, *ResponseVehicleHistory) error
	CreateVehicleLocation(context.Context, *RequestVehicleAddress, *ResponseCreateSuccess) error
	UpdateVehicleLocation(context.Context, *RequestVehicleAddress, *ResponseSuccess) error
	DeleteVehicleLocation(context.Context, *RequestDelete, *ResponseSuccess) error
	GetVehicleLocationByVehicle(context.Context, *RequestKey, *ResponseVehicleAddress) error
	CreateVehicleMake(context.Context, *RequestVehicleMake, *ResponseCreateSuccess) error
	UpdateVehicleMake(context.Context, *RequestVehicleMake, *ResponseSuccess) error
	DeleteVehicleMake(context.Context, *RequestDelete, *ResponseSuccess) error
	GetAllVehicleMake(context.Context, *empty.Empty, *ResponseVehicleMake) error
	GetVehicleMakeById(context.Context, *RequestKey, *ResponseVehicleMake) error
	CreateVehicleModel(context.Context, *RequestVehicleModel, *ResponseCreateSuccess) error
	UpdateVehicleModel(context.Context, *RequestVehicleModel, *ResponseSuccess) error
	DeleteVehicleModel(context.Context, *RequestDelete, *ResponseSuccess) error
	GetAllModelByMake(context.Context, *RequestKey, *ResponseVehicleModel) error
	GetModelById(context.Context, *RequestKey, *ResponseVehicleModel) error
	CreateVehicleReg(context.Context, *RequestVehicleReg, *ResponseCreateSuccess) error
	UpdateVehicleReg(context.Context, *RequestVehicleReg, *ResponseSuccess) error
	DeleteVehicleReg(context.Context, *RequestDelete, *ResponseSuccess) error
	GetAllRegistrationsByVehicleId(context.Context, *RequestKey, *ResponseVehicleReg) error
	GetActiveRegistrationsByVehicleId(context.Context, *RequestKey, *ResponseVehicleReg) error
	CreateVehicleStatus(context.Context, *RequestVehicleStatus, *ResponseCreateSuccess) error
	UpdateVehicleStatus(context.Context, *RequestVehicleStatus, *ResponseSuccess) error
	DeleteVehicleStatus(context.Context, *RequestDelete, *ResponseSuccess) error
	GetAllVehicleStatus(context.Context, *empty.Empty, *ResponseVehicleStatus) error
	CreateVehicleOpBound(context.Context, *RequestVehicleOprBound, *ResponseCreateSuccess) error
	UpdateVehicleOpBound(context.Context, *RequestVehicleOprBound, *ResponseSuccess) error
	DeleteVehicleOpBound(context.Context, *RequestDelete, *ResponseSuccess) error
}

func RegisterMasterServiceHandler(s server.Server, hdlr MasterServiceHandler, opts ...server.HandlerOption) error {
	type masterService interface {
		CreateCompany(ctx context.Context, in *RequestCompany, out *ResponseCreateSuccess) error
		UpdateCompany(ctx context.Context, in *RequestCompany, out *ResponseSuccess) error
		DeleteCompany(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		CreateAddressType(ctx context.Context, in *RequestAddressType, out *ResponseCreateSuccess) error
		UpdateAddressType(ctx context.Context, in *RequestAddressType, out *ResponseSuccess) error
		DeleteAddressType(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetAddressTypeById(ctx context.Context, in *RequestKey, out *ResponseAddressType) error
		GetAddressTypeByName(ctx context.Context, in *RequestByName, out *ResponseAddressType) error
		GetAllAddressTypes(ctx context.Context, in *empty.Empty, out *ResponseAddressType) error
		GetAllAddressTypeNames(ctx context.Context, in *RequestByName, out *ResponseAddressType) error
		CreateRegion(ctx context.Context, in *RequestRegion, out *ResponseCreateSuccess) error
		UpdateRegion(ctx context.Context, in *RequestRegion, out *ResponseSuccess) error
		DeleteRegion(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetAllRegion(ctx context.Context, in *empty.Empty, out *ResponseRegion) error
		GetRegionById(ctx context.Context, in *RequestKey, out *ResponseRegion) error
		GetRegionByName(ctx context.Context, in *RequestByName, out *ResponseRegion) error
		CreateState(ctx context.Context, in *RequestState, out *ResponseCreateSuccess) error
		UpdateState(ctx context.Context, in *RequestState, out *ResponseSuccess) error
		DeleteState(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetStateById(ctx context.Context, in *RequestKey, out *ResponseState) error
		GetStateByCountryId(ctx context.Context, in *RequestKey, out *ResponseState) error
		GetStateByName(ctx context.Context, in *RequestByName, out *ResponseState) error
		GetAllStates(ctx context.Context, in *empty.Empty, out *ResponseState) error
		CreateContact(ctx context.Context, in *RequestContact, out *ResponseCreateSuccess) error
		UpdateContact(ctx context.Context, in *RequestContact, out *ResponseSuccess) error
		DeleteContact(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		ContactById(ctx context.Context, in *RequestKey, out *ResponseContact) error
		CreateAddress(ctx context.Context, in *RequestAddress, out *ResponseCreateSuccess) error
		UpdateAddress(ctx context.Context, in *RequestAddress, out *ResponseSuccess) error
		DeleteAddress(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetAddressById(ctx context.Context, in *RequestKey, out *ResponseAddress) error
		GetAddressByName(ctx context.Context, in *RequestByName, out *ResponseAddress) error
		CreateFleet(ctx context.Context, in *RequestFleet, out *ResponseCreateSuccess) error
		UpdateFleet(ctx context.Context, in *RequestFleet, out *ResponseSuccess) error
		DeleteFleet(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetFleetById(ctx context.Context, in *RequestKey, out *ResponseFleet) error
		CreateFleetContact(ctx context.Context, in *RequestFleetContact, out *ResponseCreateSuccess) error
		UpdateFleetContact(ctx context.Context, in *RequestFleetContact, out *ResponseSuccess) error
		DeleteFleetContact(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetContactByFleetId(ctx context.Context, in *RequestKey, out *ResponseFleetContact) error
		CreateFleetLocation(ctx context.Context, in *RequestFleetLocation, out *ResponseCreateSuccess) error
		UpdateFleetLocation(ctx context.Context, in *RequestFleetLocation, out *ResponseSuccess) error
		DeleteFleetLocation(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetLocationByFleetId(ctx context.Context, in *RequestKey, out *ResponseFleetLocation) error
		CreateOperator(ctx context.Context, in *RequestOperator, out *ResponseCreateSuccess) error
		UpdateOperator(ctx context.Context, in *RequestOperator, out *ResponseSuccess) error
		DeleteOperator(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetOperatorById(ctx context.Context, in *RequestKey, out *ResponseOperator) error
		GetOperatorsByVehicleId(ctx context.Context, in *RequestKey, out *ResponseOperator) error
		CreateOperatorContact(ctx context.Context, in *RequestOperatorContact, out *ResponseCreateSuccess) error
		UpdateOperatorContact(ctx context.Context, in *RequestOperatorContact, out *ResponseSuccess) error
		DeleteOperatorContact(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetAllContactsByOperator(ctx context.Context, in *RequestKey, out *ResponseOperatorContacts) error
		CreateOperatorLocation(ctx context.Context, in *RequestOperatorLocation, out *ResponseCreateSuccess) error
		UpdateOperatorLocation(ctx context.Context, in *RequestOperatorLocation, out *ResponseSuccess) error
		DeleteOperatorLocation(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetOperatorLocationByOperator(ctx context.Context, in *RequestKey, out *ResponseOperatorLocation) error
		CreateVehicle(ctx context.Context, in *RequestVehicle, out *ResponseCreateSuccess) error
		UpdateVehicle(ctx context.Context, in *RequestVehicle, out *ResponseSuccess) error
		DeleteVehicle(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetVehicleById(ctx context.Context, in *RequestKey, out *ResponseVehicle) error
		GetVehicleByRegistration(ctx context.Context, in *RequestByName, out *ResponseVehicle) error
		GetVehiclesByFleetId(ctx context.Context, in *RequestKey, out *ResponseVehicle) error
		CreateVehicleHistory(ctx context.Context, in *RequestVehicleHistory, out *ResponseCreateSuccess) error
		UpdateVehicleHistory(ctx context.Context, in *RequestVehicleHistory, out *ResponseSuccess) error
		DeleteVehicleHistory(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetVehicleHistoryByVehicleId(ctx context.Context, in *RequestKey, out *ResponseVehicleHistory) error
		CreateVehicleLocation(ctx context.Context, in *RequestVehicleAddress, out *ResponseCreateSuccess) error
		UpdateVehicleLocation(ctx context.Context, in *RequestVehicleAddress, out *ResponseSuccess) error
		DeleteVehicleLocation(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetVehicleLocationByVehicle(ctx context.Context, in *RequestKey, out *ResponseVehicleAddress) error
		CreateVehicleMake(ctx context.Context, in *RequestVehicleMake, out *ResponseCreateSuccess) error
		UpdateVehicleMake(ctx context.Context, in *RequestVehicleMake, out *ResponseSuccess) error
		DeleteVehicleMake(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetAllVehicleMake(ctx context.Context, in *empty.Empty, out *ResponseVehicleMake) error
		GetVehicleMakeById(ctx context.Context, in *RequestKey, out *ResponseVehicleMake) error
		CreateVehicleModel(ctx context.Context, in *RequestVehicleModel, out *ResponseCreateSuccess) error
		UpdateVehicleModel(ctx context.Context, in *RequestVehicleModel, out *ResponseSuccess) error
		DeleteVehicleModel(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetAllModelByMake(ctx context.Context, in *RequestKey, out *ResponseVehicleModel) error
		GetModelById(ctx context.Context, in *RequestKey, out *ResponseVehicleModel) error
		CreateVehicleReg(ctx context.Context, in *RequestVehicleReg, out *ResponseCreateSuccess) error
		UpdateVehicleReg(ctx context.Context, in *RequestVehicleReg, out *ResponseSuccess) error
		DeleteVehicleReg(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetAllRegistrationsByVehicleId(ctx context.Context, in *RequestKey, out *ResponseVehicleReg) error
		GetActiveRegistrationsByVehicleId(ctx context.Context, in *RequestKey, out *ResponseVehicleReg) error
		CreateVehicleStatus(ctx context.Context, in *RequestVehicleStatus, out *ResponseCreateSuccess) error
		UpdateVehicleStatus(ctx context.Context, in *RequestVehicleStatus, out *ResponseSuccess) error
		DeleteVehicleStatus(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
		GetAllVehicleStatus(ctx context.Context, in *empty.Empty, out *ResponseVehicleStatus) error
		CreateVehicleOpBound(ctx context.Context, in *RequestVehicleOprBound, out *ResponseCreateSuccess) error
		UpdateVehicleOpBound(ctx context.Context, in *RequestVehicleOprBound, out *ResponseSuccess) error
		DeleteVehicleOpBound(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error
	}
	type MasterService struct {
		masterService
	}
	h := &masterServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MasterService{h}, opts...))
}

type masterServiceHandler struct {
	MasterServiceHandler
}

func (h *masterServiceHandler) CreateCompany(ctx context.Context, in *RequestCompany, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateCompany(ctx, in, out)
}

func (h *masterServiceHandler) UpdateCompany(ctx context.Context, in *RequestCompany, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateCompany(ctx, in, out)
}

func (h *masterServiceHandler) DeleteCompany(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteCompany(ctx, in, out)
}

func (h *masterServiceHandler) CreateAddressType(ctx context.Context, in *RequestAddressType, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateAddressType(ctx, in, out)
}

func (h *masterServiceHandler) UpdateAddressType(ctx context.Context, in *RequestAddressType, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateAddressType(ctx, in, out)
}

func (h *masterServiceHandler) DeleteAddressType(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteAddressType(ctx, in, out)
}

func (h *masterServiceHandler) GetAddressTypeById(ctx context.Context, in *RequestKey, out *ResponseAddressType) error {
	return h.MasterServiceHandler.GetAddressTypeById(ctx, in, out)
}

func (h *masterServiceHandler) GetAddressTypeByName(ctx context.Context, in *RequestByName, out *ResponseAddressType) error {
	return h.MasterServiceHandler.GetAddressTypeByName(ctx, in, out)
}

func (h *masterServiceHandler) GetAllAddressTypes(ctx context.Context, in *empty.Empty, out *ResponseAddressType) error {
	return h.MasterServiceHandler.GetAllAddressTypes(ctx, in, out)
}

func (h *masterServiceHandler) GetAllAddressTypeNames(ctx context.Context, in *RequestByName, out *ResponseAddressType) error {
	return h.MasterServiceHandler.GetAllAddressTypeNames(ctx, in, out)
}

func (h *masterServiceHandler) CreateRegion(ctx context.Context, in *RequestRegion, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateRegion(ctx, in, out)
}

func (h *masterServiceHandler) UpdateRegion(ctx context.Context, in *RequestRegion, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateRegion(ctx, in, out)
}

func (h *masterServiceHandler) DeleteRegion(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteRegion(ctx, in, out)
}

func (h *masterServiceHandler) GetAllRegion(ctx context.Context, in *empty.Empty, out *ResponseRegion) error {
	return h.MasterServiceHandler.GetAllRegion(ctx, in, out)
}

func (h *masterServiceHandler) GetRegionById(ctx context.Context, in *RequestKey, out *ResponseRegion) error {
	return h.MasterServiceHandler.GetRegionById(ctx, in, out)
}

func (h *masterServiceHandler) GetRegionByName(ctx context.Context, in *RequestByName, out *ResponseRegion) error {
	return h.MasterServiceHandler.GetRegionByName(ctx, in, out)
}

func (h *masterServiceHandler) CreateState(ctx context.Context, in *RequestState, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateState(ctx, in, out)
}

func (h *masterServiceHandler) UpdateState(ctx context.Context, in *RequestState, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateState(ctx, in, out)
}

func (h *masterServiceHandler) DeleteState(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteState(ctx, in, out)
}

func (h *masterServiceHandler) GetStateById(ctx context.Context, in *RequestKey, out *ResponseState) error {
	return h.MasterServiceHandler.GetStateById(ctx, in, out)
}

func (h *masterServiceHandler) GetStateByCountryId(ctx context.Context, in *RequestKey, out *ResponseState) error {
	return h.MasterServiceHandler.GetStateByCountryId(ctx, in, out)
}

func (h *masterServiceHandler) GetStateByName(ctx context.Context, in *RequestByName, out *ResponseState) error {
	return h.MasterServiceHandler.GetStateByName(ctx, in, out)
}

func (h *masterServiceHandler) GetAllStates(ctx context.Context, in *empty.Empty, out *ResponseState) error {
	return h.MasterServiceHandler.GetAllStates(ctx, in, out)
}

func (h *masterServiceHandler) CreateContact(ctx context.Context, in *RequestContact, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateContact(ctx, in, out)
}

func (h *masterServiceHandler) UpdateContact(ctx context.Context, in *RequestContact, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateContact(ctx, in, out)
}

func (h *masterServiceHandler) DeleteContact(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteContact(ctx, in, out)
}

func (h *masterServiceHandler) ContactById(ctx context.Context, in *RequestKey, out *ResponseContact) error {
	return h.MasterServiceHandler.ContactById(ctx, in, out)
}

func (h *masterServiceHandler) CreateAddress(ctx context.Context, in *RequestAddress, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateAddress(ctx, in, out)
}

func (h *masterServiceHandler) UpdateAddress(ctx context.Context, in *RequestAddress, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateAddress(ctx, in, out)
}

func (h *masterServiceHandler) DeleteAddress(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteAddress(ctx, in, out)
}

func (h *masterServiceHandler) GetAddressById(ctx context.Context, in *RequestKey, out *ResponseAddress) error {
	return h.MasterServiceHandler.GetAddressById(ctx, in, out)
}

func (h *masterServiceHandler) GetAddressByName(ctx context.Context, in *RequestByName, out *ResponseAddress) error {
	return h.MasterServiceHandler.GetAddressByName(ctx, in, out)
}

func (h *masterServiceHandler) CreateFleet(ctx context.Context, in *RequestFleet, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateFleet(ctx, in, out)
}

func (h *masterServiceHandler) UpdateFleet(ctx context.Context, in *RequestFleet, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateFleet(ctx, in, out)
}

func (h *masterServiceHandler) DeleteFleet(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteFleet(ctx, in, out)
}

func (h *masterServiceHandler) GetFleetById(ctx context.Context, in *RequestKey, out *ResponseFleet) error {
	return h.MasterServiceHandler.GetFleetById(ctx, in, out)
}

func (h *masterServiceHandler) CreateFleetContact(ctx context.Context, in *RequestFleetContact, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateFleetContact(ctx, in, out)
}

func (h *masterServiceHandler) UpdateFleetContact(ctx context.Context, in *RequestFleetContact, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateFleetContact(ctx, in, out)
}

func (h *masterServiceHandler) DeleteFleetContact(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteFleetContact(ctx, in, out)
}

func (h *masterServiceHandler) GetContactByFleetId(ctx context.Context, in *RequestKey, out *ResponseFleetContact) error {
	return h.MasterServiceHandler.GetContactByFleetId(ctx, in, out)
}

func (h *masterServiceHandler) CreateFleetLocation(ctx context.Context, in *RequestFleetLocation, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateFleetLocation(ctx, in, out)
}

func (h *masterServiceHandler) UpdateFleetLocation(ctx context.Context, in *RequestFleetLocation, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateFleetLocation(ctx, in, out)
}

func (h *masterServiceHandler) DeleteFleetLocation(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteFleetLocation(ctx, in, out)
}

func (h *masterServiceHandler) GetLocationByFleetId(ctx context.Context, in *RequestKey, out *ResponseFleetLocation) error {
	return h.MasterServiceHandler.GetLocationByFleetId(ctx, in, out)
}

func (h *masterServiceHandler) CreateOperator(ctx context.Context, in *RequestOperator, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateOperator(ctx, in, out)
}

func (h *masterServiceHandler) UpdateOperator(ctx context.Context, in *RequestOperator, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateOperator(ctx, in, out)
}

func (h *masterServiceHandler) DeleteOperator(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteOperator(ctx, in, out)
}

func (h *masterServiceHandler) GetOperatorById(ctx context.Context, in *RequestKey, out *ResponseOperator) error {
	return h.MasterServiceHandler.GetOperatorById(ctx, in, out)
}

func (h *masterServiceHandler) GetOperatorsByVehicleId(ctx context.Context, in *RequestKey, out *ResponseOperator) error {
	return h.MasterServiceHandler.GetOperatorsByVehicleId(ctx, in, out)
}

func (h *masterServiceHandler) CreateOperatorContact(ctx context.Context, in *RequestOperatorContact, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateOperatorContact(ctx, in, out)
}

func (h *masterServiceHandler) UpdateOperatorContact(ctx context.Context, in *RequestOperatorContact, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateOperatorContact(ctx, in, out)
}

func (h *masterServiceHandler) DeleteOperatorContact(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteOperatorContact(ctx, in, out)
}

func (h *masterServiceHandler) GetAllContactsByOperator(ctx context.Context, in *RequestKey, out *ResponseOperatorContacts) error {
	return h.MasterServiceHandler.GetAllContactsByOperator(ctx, in, out)
}

func (h *masterServiceHandler) CreateOperatorLocation(ctx context.Context, in *RequestOperatorLocation, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateOperatorLocation(ctx, in, out)
}

func (h *masterServiceHandler) UpdateOperatorLocation(ctx context.Context, in *RequestOperatorLocation, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateOperatorLocation(ctx, in, out)
}

func (h *masterServiceHandler) DeleteOperatorLocation(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteOperatorLocation(ctx, in, out)
}

func (h *masterServiceHandler) GetOperatorLocationByOperator(ctx context.Context, in *RequestKey, out *ResponseOperatorLocation) error {
	return h.MasterServiceHandler.GetOperatorLocationByOperator(ctx, in, out)
}

func (h *masterServiceHandler) CreateVehicle(ctx context.Context, in *RequestVehicle, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateVehicle(ctx, in, out)
}

func (h *masterServiceHandler) UpdateVehicle(ctx context.Context, in *RequestVehicle, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateVehicle(ctx, in, out)
}

func (h *masterServiceHandler) DeleteVehicle(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteVehicle(ctx, in, out)
}

func (h *masterServiceHandler) GetVehicleById(ctx context.Context, in *RequestKey, out *ResponseVehicle) error {
	return h.MasterServiceHandler.GetVehicleById(ctx, in, out)
}

func (h *masterServiceHandler) GetVehicleByRegistration(ctx context.Context, in *RequestByName, out *ResponseVehicle) error {
	return h.MasterServiceHandler.GetVehicleByRegistration(ctx, in, out)
}

func (h *masterServiceHandler) GetVehiclesByFleetId(ctx context.Context, in *RequestKey, out *ResponseVehicle) error {
	return h.MasterServiceHandler.GetVehiclesByFleetId(ctx, in, out)
}

func (h *masterServiceHandler) CreateVehicleHistory(ctx context.Context, in *RequestVehicleHistory, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateVehicleHistory(ctx, in, out)
}

func (h *masterServiceHandler) UpdateVehicleHistory(ctx context.Context, in *RequestVehicleHistory, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateVehicleHistory(ctx, in, out)
}

func (h *masterServiceHandler) DeleteVehicleHistory(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteVehicleHistory(ctx, in, out)
}

func (h *masterServiceHandler) GetVehicleHistoryByVehicleId(ctx context.Context, in *RequestKey, out *ResponseVehicleHistory) error {
	return h.MasterServiceHandler.GetVehicleHistoryByVehicleId(ctx, in, out)
}

func (h *masterServiceHandler) CreateVehicleLocation(ctx context.Context, in *RequestVehicleAddress, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateVehicleLocation(ctx, in, out)
}

func (h *masterServiceHandler) UpdateVehicleLocation(ctx context.Context, in *RequestVehicleAddress, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateVehicleLocation(ctx, in, out)
}

func (h *masterServiceHandler) DeleteVehicleLocation(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteVehicleLocation(ctx, in, out)
}

func (h *masterServiceHandler) GetVehicleLocationByVehicle(ctx context.Context, in *RequestKey, out *ResponseVehicleAddress) error {
	return h.MasterServiceHandler.GetVehicleLocationByVehicle(ctx, in, out)
}

func (h *masterServiceHandler) CreateVehicleMake(ctx context.Context, in *RequestVehicleMake, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateVehicleMake(ctx, in, out)
}

func (h *masterServiceHandler) UpdateVehicleMake(ctx context.Context, in *RequestVehicleMake, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateVehicleMake(ctx, in, out)
}

func (h *masterServiceHandler) DeleteVehicleMake(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteVehicleMake(ctx, in, out)
}

func (h *masterServiceHandler) GetAllVehicleMake(ctx context.Context, in *empty.Empty, out *ResponseVehicleMake) error {
	return h.MasterServiceHandler.GetAllVehicleMake(ctx, in, out)
}

func (h *masterServiceHandler) GetVehicleMakeById(ctx context.Context, in *RequestKey, out *ResponseVehicleMake) error {
	return h.MasterServiceHandler.GetVehicleMakeById(ctx, in, out)
}

func (h *masterServiceHandler) CreateVehicleModel(ctx context.Context, in *RequestVehicleModel, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateVehicleModel(ctx, in, out)
}

func (h *masterServiceHandler) UpdateVehicleModel(ctx context.Context, in *RequestVehicleModel, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateVehicleModel(ctx, in, out)
}

func (h *masterServiceHandler) DeleteVehicleModel(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteVehicleModel(ctx, in, out)
}

func (h *masterServiceHandler) GetAllModelByMake(ctx context.Context, in *RequestKey, out *ResponseVehicleModel) error {
	return h.MasterServiceHandler.GetAllModelByMake(ctx, in, out)
}

func (h *masterServiceHandler) GetModelById(ctx context.Context, in *RequestKey, out *ResponseVehicleModel) error {
	return h.MasterServiceHandler.GetModelById(ctx, in, out)
}

func (h *masterServiceHandler) CreateVehicleReg(ctx context.Context, in *RequestVehicleReg, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateVehicleReg(ctx, in, out)
}

func (h *masterServiceHandler) UpdateVehicleReg(ctx context.Context, in *RequestVehicleReg, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateVehicleReg(ctx, in, out)
}

func (h *masterServiceHandler) DeleteVehicleReg(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteVehicleReg(ctx, in, out)
}

func (h *masterServiceHandler) GetAllRegistrationsByVehicleId(ctx context.Context, in *RequestKey, out *ResponseVehicleReg) error {
	return h.MasterServiceHandler.GetAllRegistrationsByVehicleId(ctx, in, out)
}

func (h *masterServiceHandler) GetActiveRegistrationsByVehicleId(ctx context.Context, in *RequestKey, out *ResponseVehicleReg) error {
	return h.MasterServiceHandler.GetActiveRegistrationsByVehicleId(ctx, in, out)
}

func (h *masterServiceHandler) CreateVehicleStatus(ctx context.Context, in *RequestVehicleStatus, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateVehicleStatus(ctx, in, out)
}

func (h *masterServiceHandler) UpdateVehicleStatus(ctx context.Context, in *RequestVehicleStatus, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateVehicleStatus(ctx, in, out)
}

func (h *masterServiceHandler) DeleteVehicleStatus(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteVehicleStatus(ctx, in, out)
}

func (h *masterServiceHandler) GetAllVehicleStatus(ctx context.Context, in *empty.Empty, out *ResponseVehicleStatus) error {
	return h.MasterServiceHandler.GetAllVehicleStatus(ctx, in, out)
}

func (h *masterServiceHandler) CreateVehicleOpBound(ctx context.Context, in *RequestVehicleOprBound, out *ResponseCreateSuccess) error {
	return h.MasterServiceHandler.CreateVehicleOpBound(ctx, in, out)
}

func (h *masterServiceHandler) UpdateVehicleOpBound(ctx context.Context, in *RequestVehicleOprBound, out *ResponseSuccess) error {
	return h.MasterServiceHandler.UpdateVehicleOpBound(ctx, in, out)
}

func (h *masterServiceHandler) DeleteVehicleOpBound(ctx context.Context, in *RequestDelete, out *ResponseSuccess) error {
	return h.MasterServiceHandler.DeleteVehicleOpBound(ctx, in, out)
}
