// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: master.proto

package go_micro_srv_master

import (
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StateProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	CountryId string `protobuf:"bytes,3,opt,name=CountryId,proto3" json:"CountryId,omitempty"`
}

func (x *StateProto) Reset() {
	*x = StateProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateProto) ProtoMessage() {}

func (x *StateProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateProto.ProtoReflect.Descriptor instead.
func (*StateProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{0}
}

func (x *StateProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StateProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StateProto) GetCountryId() string {
	if x != nil {
		return x.CountryId
	}
	return ""
}

type CountryProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string               `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CountryName string               `protobuf:"bytes,2,opt,name=CountryName,proto3" json:"CountryName,omitempty"`
	RegionId    string               `protobuf:"bytes,3,opt,name=RegionId,proto3" json:"RegionId,omitempty"`
	States      []*StateProto        `protobuf:"bytes,4,rep,name=States,proto3" json:"States,omitempty"`
	UpdatedAt   *timestamp.Timestamp `protobuf:"bytes,5,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *CountryProto) Reset() {
	*x = CountryProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryProto) ProtoMessage() {}

func (x *CountryProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryProto.ProtoReflect.Descriptor instead.
func (*CountryProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{1}
}

func (x *CountryProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CountryProto) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *CountryProto) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *CountryProto) GetStates() []*StateProto {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *CountryProto) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ContactProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string               `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Contact       string               `protobuf:"bytes,2,opt,name=Contact,proto3" json:"Contact,omitempty"`
	ContactTypeId string               `protobuf:"bytes,3,opt,name=ContactTypeId,proto3" json:"ContactTypeId,omitempty"`
	UpdatedAt     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *ContactProto) Reset() {
	*x = ContactProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactProto) ProtoMessage() {}

func (x *ContactProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactProto.ProtoReflect.Descriptor instead.
func (*ContactProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{2}
}

func (x *ContactProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContactProto) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *ContactProto) GetContactTypeId() string {
	if x != nil {
		return x.ContactTypeId
	}
	return ""
}

func (x *ContactProto) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type AddressTypeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *AddressTypeProto) Reset() {
	*x = AddressTypeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressTypeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressTypeProto) ProtoMessage() {}

func (x *AddressTypeProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressTypeProto.ProtoReflect.Descriptor instead.
func (*AddressTypeProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{3}
}

func (x *AddressTypeProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddressTypeProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RegionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Region     string `protobuf:"bytes,2,opt,name=Region,proto3" json:"Region,omitempty"`
	RegionName string `protobuf:"bytes,3,opt,name=RegionName,proto3" json:"RegionName,omitempty"`
}

func (x *RegionProto) Reset() {
	*x = RegionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionProto) ProtoMessage() {}

func (x *RegionProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionProto.ProtoReflect.Descriptor instead.
func (*RegionProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{4}
}

func (x *RegionProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegionProto) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RegionProto) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

type AddressProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string               `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Address       string               `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	Street        string               `protobuf:"bytes,3,opt,name=Street,proto3" json:"Street,omitempty"`
	Suburb        string               `protobuf:"bytes,4,opt,name=Suburb,proto3" json:"Suburb,omitempty"`
	StateId       string               `protobuf:"bytes,5,opt,name=StateId,proto3" json:"StateId,omitempty"`
	CountryId     string               `protobuf:"bytes,6,opt,name=CountryId,proto3" json:"CountryId,omitempty"`
	AddressTypeId string               `protobuf:"bytes,7,opt,name=AddressTypeId,proto3" json:"AddressTypeId,omitempty"`
	Location      string               `protobuf:"bytes,8,opt,name=Location,proto3" json:"Location,omitempty"`
	AddressType   *AddressTypeProto    `protobuf:"bytes,9,opt,name=AddressType,proto3" json:"AddressType,omitempty"`
	State         *StateProto          `protobuf:"bytes,10,opt,name=State,proto3" json:"State,omitempty"`
	Country       *CountryProto        `protobuf:"bytes,11,opt,name=Country,proto3" json:"Country,omitempty"`
	UpdatedAt     *timestamp.Timestamp `protobuf:"bytes,12,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *AddressProto) Reset() {
	*x = AddressProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressProto) ProtoMessage() {}

func (x *AddressProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressProto.ProtoReflect.Descriptor instead.
func (*AddressProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{5}
}

func (x *AddressProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddressProto) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddressProto) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *AddressProto) GetSuburb() string {
	if x != nil {
		return x.Suburb
	}
	return ""
}

func (x *AddressProto) GetStateId() string {
	if x != nil {
		return x.StateId
	}
	return ""
}

func (x *AddressProto) GetCountryId() string {
	if x != nil {
		return x.CountryId
	}
	return ""
}

func (x *AddressProto) GetAddressTypeId() string {
	if x != nil {
		return x.AddressTypeId
	}
	return ""
}

func (x *AddressProto) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *AddressProto) GetAddressType() *AddressTypeProto {
	if x != nil {
		return x.AddressType
	}
	return nil
}

func (x *AddressProto) GetState() *StateProto {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *AddressProto) GetCountry() *CountryProto {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *AddressProto) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CompanyProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string        `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name      string        `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	AddressId string        `protobuf:"bytes,3,opt,name=AddressId,proto3" json:"AddressId,omitempty"`
	ContactId string        `protobuf:"bytes,4,opt,name=ContactId,proto3" json:"ContactId,omitempty"`
	Address   *AddressProto `protobuf:"bytes,5,opt,name=Address,proto3" json:"Address,omitempty"`
	Contact   *ContactProto `protobuf:"bytes,6,opt,name=Contact,proto3" json:"Contact,omitempty"`
}

func (x *CompanyProto) Reset() {
	*x = CompanyProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyProto) ProtoMessage() {}

func (x *CompanyProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyProto.ProtoReflect.Descriptor instead.
func (*CompanyProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{6}
}

func (x *CompanyProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CompanyProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompanyProto) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

func (x *CompanyProto) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *CompanyProto) GetAddress() *AddressProto {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CompanyProto) GetContact() *ContactProto {
	if x != nil {
		return x.Contact
	}
	return nil
}

type VehicleMakeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string               `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Make      string               `protobuf:"bytes,2,opt,name=Make,proto3" json:"Make,omitempty"`
	CountryId string               `protobuf:"bytes,3,opt,name=CountryId,proto3" json:"CountryId,omitempty"`
	UpdateAt  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
	Country   *CountryProto        `protobuf:"bytes,5,opt,name=Country,proto3" json:"Country,omitempty"`
}

func (x *VehicleMakeProto) Reset() {
	*x = VehicleMakeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleMakeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleMakeProto) ProtoMessage() {}

func (x *VehicleMakeProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleMakeProto.ProtoReflect.Descriptor instead.
func (*VehicleMakeProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{7}
}

func (x *VehicleMakeProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VehicleMakeProto) GetMake() string {
	if x != nil {
		return x.Make
	}
	return ""
}

func (x *VehicleMakeProto) GetCountryId() string {
	if x != nil {
		return x.CountryId
	}
	return ""
}

func (x *VehicleMakeProto) GetUpdateAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

func (x *VehicleMakeProto) GetCountry() *CountryProto {
	if x != nil {
		return x.Country
	}
	return nil
}

type VehicleModelProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string               `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ModelName   string               `protobuf:"bytes,2,opt,name=ModelName,proto3" json:"ModelName,omitempty"`
	Description string               `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	MakeId      string               `protobuf:"bytes,4,opt,name=MakeId,proto3" json:"MakeId,omitempty"`
	UpdatedAt   *timestamp.Timestamp `protobuf:"bytes,5,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Make        *VehicleMakeProto    `protobuf:"bytes,6,opt,name=Make,proto3" json:"Make,omitempty"`
}

func (x *VehicleModelProto) Reset() {
	*x = VehicleModelProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleModelProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleModelProto) ProtoMessage() {}

func (x *VehicleModelProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleModelProto.ProtoReflect.Descriptor instead.
func (*VehicleModelProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{8}
}

func (x *VehicleModelProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VehicleModelProto) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *VehicleModelProto) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VehicleModelProto) GetMakeId() string {
	if x != nil {
		return x.MakeId
	}
	return ""
}

func (x *VehicleModelProto) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *VehicleModelProto) GetMake() *VehicleMakeProto {
	if x != nil {
		return x.Make
	}
	return nil
}

type FleetProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string               `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	FleetCode            string               `protobuf:"bytes,3,opt,name=FleetCode,proto3" json:"FleetCode,omitempty"`
	Name                 string               `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	SurName              string               `protobuf:"bytes,5,opt,name=SurName,proto3" json:"SurName,omitempty"`
	OtherName            string               `protobuf:"bytes,6,opt,name=OtherName,proto3" json:"OtherName,omitempty"`
	DateRegistered       *timestamp.Timestamp `protobuf:"bytes,7,opt,name=DateRegistered,proto3" json:"DateRegistered,omitempty"`
	RegistrationDuration float32              `protobuf:"fixed32,8,opt,name=RegistrationDuration,proto3" json:"RegistrationDuration,omitempty"`
	FleetContactId       string               `protobuf:"bytes,9,opt,name=FleetContactId,proto3" json:"FleetContactId,omitempty"`
	FleetLocationId      string               `protobuf:"bytes,10,opt,name=FleetLocationId,proto3" json:"FleetLocationId,omitempty"`
	CountryId            string               `protobuf:"bytes,11,opt,name=CountryId,proto3" json:"CountryId,omitempty"`
	FleetContacts        []*ContactProto      `protobuf:"bytes,12,rep,name=FleetContacts,proto3" json:"FleetContacts,omitempty"`
	Address              []*AddressProto      `protobuf:"bytes,13,rep,name=Address,proto3" json:"Address,omitempty"`
}

func (x *FleetProto) Reset() {
	*x = FleetProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleetProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleetProto) ProtoMessage() {}

func (x *FleetProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleetProto.ProtoReflect.Descriptor instead.
func (*FleetProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{9}
}

func (x *FleetProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FleetProto) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *FleetProto) GetFleetCode() string {
	if x != nil {
		return x.FleetCode
	}
	return ""
}

func (x *FleetProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FleetProto) GetSurName() string {
	if x != nil {
		return x.SurName
	}
	return ""
}

func (x *FleetProto) GetOtherName() string {
	if x != nil {
		return x.OtherName
	}
	return ""
}

func (x *FleetProto) GetDateRegistered() *timestamp.Timestamp {
	if x != nil {
		return x.DateRegistered
	}
	return nil
}

func (x *FleetProto) GetRegistrationDuration() float32 {
	if x != nil {
		return x.RegistrationDuration
	}
	return 0
}

func (x *FleetProto) GetFleetContactId() string {
	if x != nil {
		return x.FleetContactId
	}
	return ""
}

func (x *FleetProto) GetFleetLocationId() string {
	if x != nil {
		return x.FleetLocationId
	}
	return ""
}

func (x *FleetProto) GetCountryId() string {
	if x != nil {
		return x.CountryId
	}
	return ""
}

func (x *FleetProto) GetFleetContacts() []*ContactProto {
	if x != nil {
		return x.FleetContacts
	}
	return nil
}

func (x *FleetProto) GetAddress() []*AddressProto {
	if x != nil {
		return x.Address
	}
	return nil
}

type VehicleStatusProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string               `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	StatusType string               `protobuf:"bytes,2,opt,name=StatusType,proto3" json:"StatusType,omitempty"`
	StatusName string               `protobuf:"bytes,3,opt,name=StatusName,proto3" json:"StatusName,omitempty"`
	UpdatedAt  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *VehicleStatusProto) Reset() {
	*x = VehicleStatusProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleStatusProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleStatusProto) ProtoMessage() {}

func (x *VehicleStatusProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleStatusProto.ProtoReflect.Descriptor instead.
func (*VehicleStatusProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{10}
}

func (x *VehicleStatusProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VehicleStatusProto) GetStatusType() string {
	if x != nil {
		return x.StatusType
	}
	return ""
}

func (x *VehicleStatusProto) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *VehicleStatusProto) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type VehicleAddressProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string               `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	AddressId string               `protobuf:"bytes,2,opt,name=AddressId,proto3" json:"AddressId,omitempty"`
	VehicleId string               `protobuf:"bytes,3,opt,name=VehicleId,proto3" json:"VehicleId,omitempty"`
	Primary   bool                 `protobuf:"varint,4,opt,name=Primary,proto3" json:"Primary,omitempty"`
	UpdateAt  *timestamp.Timestamp `protobuf:"bytes,5,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
	Address   *AddressProto        `protobuf:"bytes,6,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *VehicleAddressProto) Reset() {
	*x = VehicleAddressProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleAddressProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleAddressProto) ProtoMessage() {}

func (x *VehicleAddressProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleAddressProto.ProtoReflect.Descriptor instead.
func (*VehicleAddressProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{11}
}

func (x *VehicleAddressProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VehicleAddressProto) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

func (x *VehicleAddressProto) GetVehicleId() string {
	if x != nil {
		return x.VehicleId
	}
	return ""
}

func (x *VehicleAddressProto) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *VehicleAddressProto) GetUpdateAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

func (x *VehicleAddressProto) GetAddress() *AddressProto {
	if x != nil {
		return x.Address
	}
	return nil
}

type OperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name       string                   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	SurName    string                   `protobuf:"bytes,3,opt,name=SurName,proto3" json:"SurName,omitempty"`
	Active     bool                     `protobuf:"varint,4,opt,name=Active,proto3" json:"Active,omitempty"`
	DrivingLic string                   `protobuf:"bytes,5,opt,name=DrivingLic,proto3" json:"DrivingLic,omitempty"`
	UpdateAt   *timestamp.Timestamp     `protobuf:"bytes,6,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
	Locations  []*OperatorLocationProto `protobuf:"bytes,7,rep,name=Locations,proto3" json:"Locations,omitempty"`
	Contacts   []*OperatorContactsProto `protobuf:"bytes,8,rep,name=Contacts,proto3" json:"Contacts,omitempty"`
	Vehicles   []*VehicleProto          `protobuf:"bytes,9,rep,name=Vehicles,proto3" json:"Vehicles,omitempty"`
}

func (x *OperatorProto) Reset() {
	*x = OperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorProto) ProtoMessage() {}

func (x *OperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorProto.ProtoReflect.Descriptor instead.
func (*OperatorProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{12}
}

func (x *OperatorProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OperatorProto) GetSurName() string {
	if x != nil {
		return x.SurName
	}
	return ""
}

func (x *OperatorProto) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *OperatorProto) GetDrivingLic() string {
	if x != nil {
		return x.DrivingLic
	}
	return ""
}

func (x *OperatorProto) GetUpdateAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

func (x *OperatorProto) GetLocations() []*OperatorLocationProto {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *OperatorProto) GetContacts() []*OperatorContactsProto {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *OperatorProto) GetVehicles() []*VehicleProto {
	if x != nil {
		return x.Vehicles
	}
	return nil
}

type OperatorLocationProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string               `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	AddressId  string               `protobuf:"bytes,2,opt,name=AddressId,proto3" json:"AddressId,omitempty"`
	OperatorId string               `protobuf:"bytes,3,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	Primary    bool                 `protobuf:"varint,4,opt,name=Primary,proto3" json:"Primary,omitempty"`
	UpdateAt   *timestamp.Timestamp `protobuf:"bytes,5,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
	Address    *AddressProto        `protobuf:"bytes,6,opt,name=Address,proto3" json:"Address,omitempty"`
	Operator   *OperatorProto       `protobuf:"bytes,7,opt,name=Operator,proto3" json:"Operator,omitempty"`
}

func (x *OperatorLocationProto) Reset() {
	*x = OperatorLocationProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorLocationProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorLocationProto) ProtoMessage() {}

func (x *OperatorLocationProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorLocationProto.ProtoReflect.Descriptor instead.
func (*OperatorLocationProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{13}
}

func (x *OperatorLocationProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OperatorLocationProto) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

func (x *OperatorLocationProto) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *OperatorLocationProto) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *OperatorLocationProto) GetUpdateAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

func (x *OperatorLocationProto) GetAddress() *AddressProto {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *OperatorLocationProto) GetOperator() *OperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

type OperatorContactsProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string        `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ContactId  string        `protobuf:"bytes,2,opt,name=ContactId,proto3" json:"ContactId,omitempty"`
	OperatorId string        `protobuf:"bytes,3,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	Primary    bool          `protobuf:"varint,4,opt,name=Primary,proto3" json:"Primary,omitempty"`
	Contact    *ContactProto `protobuf:"bytes,5,opt,name=Contact,proto3" json:"Contact,omitempty"`
}

func (x *OperatorContactsProto) Reset() {
	*x = OperatorContactsProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorContactsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorContactsProto) ProtoMessage() {}

func (x *OperatorContactsProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorContactsProto.ProtoReflect.Descriptor instead.
func (*OperatorContactsProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{14}
}

func (x *OperatorContactsProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OperatorContactsProto) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *OperatorContactsProto) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *OperatorContactsProto) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *OperatorContactsProto) GetContact() *ContactProto {
	if x != nil {
		return x.Contact
	}
	return nil
}

type VehicleOperatorBoundProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string         `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	OperatorId string         `protobuf:"bytes,2,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	VehicleId  string         `protobuf:"bytes,3,opt,name=VehicleId,proto3" json:"VehicleId,omitempty"`
	Active     bool           `protobuf:"varint,4,opt,name=Active,proto3" json:"Active,omitempty"`
	Operator   *OperatorProto `protobuf:"bytes,5,opt,name=Operator,proto3" json:"Operator,omitempty"`
	Vehicle    *VehicleProto  `protobuf:"bytes,6,opt,name=Vehicle,proto3" json:"Vehicle,omitempty"`
}

func (x *VehicleOperatorBoundProto) Reset() {
	*x = VehicleOperatorBoundProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleOperatorBoundProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleOperatorBoundProto) ProtoMessage() {}

func (x *VehicleOperatorBoundProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleOperatorBoundProto.ProtoReflect.Descriptor instead.
func (*VehicleOperatorBoundProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{15}
}

func (x *VehicleOperatorBoundProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VehicleOperatorBoundProto) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *VehicleOperatorBoundProto) GetVehicleId() string {
	if x != nil {
		return x.VehicleId
	}
	return ""
}

func (x *VehicleOperatorBoundProto) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *VehicleOperatorBoundProto) GetOperator() *OperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *VehicleOperatorBoundProto) GetVehicle() *VehicleProto {
	if x != nil {
		return x.Vehicle
	}
	return nil
}

type VehicleTrackRegProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string               `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RegisterDate *timestamp.Timestamp `protobuf:"bytes,2,opt,name=RegisterDate,proto3" json:"RegisterDate,omitempty"`
	Duration     int32                `protobuf:"varint,3,opt,name=Duration,proto3" json:"Duration,omitempty"`
	ExpiredDate  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=ExpiredDate,proto3" json:"ExpiredDate,omitempty"`
	Active       bool                 `protobuf:"varint,5,opt,name=Active,proto3" json:"Active,omitempty"`
	VehicleId    string               `protobuf:"bytes,6,opt,name=VehicleId,proto3" json:"VehicleId,omitempty"`
	UpdatedAt    *timestamp.Timestamp `protobuf:"bytes,7,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Vehicle      *VehicleProto        `protobuf:"bytes,8,opt,name=Vehicle,proto3" json:"Vehicle,omitempty"`
}

func (x *VehicleTrackRegProto) Reset() {
	*x = VehicleTrackRegProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleTrackRegProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleTrackRegProto) ProtoMessage() {}

func (x *VehicleTrackRegProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleTrackRegProto.ProtoReflect.Descriptor instead.
func (*VehicleTrackRegProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{16}
}

func (x *VehicleTrackRegProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VehicleTrackRegProto) GetRegisterDate() *timestamp.Timestamp {
	if x != nil {
		return x.RegisterDate
	}
	return nil
}

func (x *VehicleTrackRegProto) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VehicleTrackRegProto) GetExpiredDate() *timestamp.Timestamp {
	if x != nil {
		return x.ExpiredDate
	}
	return nil
}

func (x *VehicleTrackRegProto) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *VehicleTrackRegProto) GetVehicleId() string {
	if x != nil {
		return x.VehicleId
	}
	return ""
}

func (x *VehicleTrackRegProto) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *VehicleTrackRegProto) GetVehicle() *VehicleProto {
	if x != nil {
		return x.Vehicle
	}
	return nil
}

type VehicleProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                       `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ModelId       string                       `protobuf:"bytes,2,opt,name=ModelId,proto3" json:"ModelId,omitempty"`
	MakeId        string                       `protobuf:"bytes,3,opt,name=MakeId,proto3" json:"MakeId,omitempty"`
	Registration  string                       `protobuf:"bytes,4,opt,name=Registration,proto3" json:"Registration,omitempty"`
	FleetId       string                       `protobuf:"bytes,5,opt,name=FleetId,proto3" json:"FleetId,omitempty"`
	StatusId      string                       `protobuf:"bytes,6,opt,name=StatusId,proto3" json:"StatusId,omitempty"`
	UpdatedAt     *timestamp.Timestamp         `protobuf:"bytes,7,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	OfficeName    string                       `protobuf:"bytes,8,opt,name=OfficeName,proto3" json:"OfficeName,omitempty"`
	VehicleModel  *VehicleModelProto           `protobuf:"bytes,9,opt,name=VehicleModel,proto3" json:"VehicleModel,omitempty"`
	VehicleMake   *VehicleMakeProto            `protobuf:"bytes,10,opt,name=VehicleMake,proto3" json:"VehicleMake,omitempty"`
	Status        *VehicleStatusProto          `protobuf:"bytes,11,opt,name=Status,proto3" json:"Status,omitempty"`
	Locations     []*VehicleAddressProto       `protobuf:"bytes,12,rep,name=Locations,proto3" json:"Locations,omitempty"`
	Operators     []*VehicleOperatorBoundProto `protobuf:"bytes,13,rep,name=Operators,proto3" json:"Operators,omitempty"`
	Registrations []*VehicleTrackRegProto      `protobuf:"bytes,14,rep,name=Registrations,proto3" json:"Registrations,omitempty"`
}

func (x *VehicleProto) Reset() {
	*x = VehicleProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleProto) ProtoMessage() {}

func (x *VehicleProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleProto.ProtoReflect.Descriptor instead.
func (*VehicleProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{17}
}

func (x *VehicleProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VehicleProto) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *VehicleProto) GetMakeId() string {
	if x != nil {
		return x.MakeId
	}
	return ""
}

func (x *VehicleProto) GetRegistration() string {
	if x != nil {
		return x.Registration
	}
	return ""
}

func (x *VehicleProto) GetFleetId() string {
	if x != nil {
		return x.FleetId
	}
	return ""
}

func (x *VehicleProto) GetStatusId() string {
	if x != nil {
		return x.StatusId
	}
	return ""
}

func (x *VehicleProto) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *VehicleProto) GetOfficeName() string {
	if x != nil {
		return x.OfficeName
	}
	return ""
}

func (x *VehicleProto) GetVehicleModel() *VehicleModelProto {
	if x != nil {
		return x.VehicleModel
	}
	return nil
}

func (x *VehicleProto) GetVehicleMake() *VehicleMakeProto {
	if x != nil {
		return x.VehicleMake
	}
	return nil
}

func (x *VehicleProto) GetStatus() *VehicleStatusProto {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *VehicleProto) GetLocations() []*VehicleAddressProto {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *VehicleProto) GetOperators() []*VehicleOperatorBoundProto {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *VehicleProto) GetRegistrations() []*VehicleTrackRegProto {
	if x != nil {
		return x.Registrations
	}
	return nil
}

type VehicleHistoryProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string               `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	VehicleId    string               `protobuf:"bytes,2,opt,name=VehicleId,proto3" json:"VehicleId,omitempty"`
	ChangeDate   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=ChangeDate,proto3" json:"ChangeDate,omitempty"`
	Description  string               `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	FromStatusId string               `protobuf:"bytes,5,opt,name=FromStatusId,proto3" json:"FromStatusId,omitempty"`
	ToStatusId   string               `protobuf:"bytes,6,opt,name=ToStatusId,proto3" json:"ToStatusId,omitempty"`
	OfficerName  string               `protobuf:"bytes,7,opt,name=OfficerName,proto3" json:"OfficerName,omitempty"`
	FromStatus   *VehicleStatusProto  `protobuf:"bytes,8,opt,name=FromStatus,proto3" json:"FromStatus,omitempty"`
	ToStatus     *VehicleStatusProto  `protobuf:"bytes,9,opt,name=ToStatus,proto3" json:"ToStatus,omitempty"`
}

func (x *VehicleHistoryProto) Reset() {
	*x = VehicleHistoryProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleHistoryProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleHistoryProto) ProtoMessage() {}

func (x *VehicleHistoryProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleHistoryProto.ProtoReflect.Descriptor instead.
func (*VehicleHistoryProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{18}
}

func (x *VehicleHistoryProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VehicleHistoryProto) GetVehicleId() string {
	if x != nil {
		return x.VehicleId
	}
	return ""
}

func (x *VehicleHistoryProto) GetChangeDate() *timestamp.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

func (x *VehicleHistoryProto) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VehicleHistoryProto) GetFromStatusId() string {
	if x != nil {
		return x.FromStatusId
	}
	return ""
}

func (x *VehicleHistoryProto) GetToStatusId() string {
	if x != nil {
		return x.ToStatusId
	}
	return ""
}

func (x *VehicleHistoryProto) GetOfficerName() string {
	if x != nil {
		return x.OfficerName
	}
	return ""
}

func (x *VehicleHistoryProto) GetFromStatus() *VehicleStatusProto {
	if x != nil {
		return x.FromStatus
	}
	return nil
}

func (x *VehicleHistoryProto) GetToStatus() *VehicleStatusProto {
	if x != nil {
		return x.ToStatus
	}
	return nil
}

type FleetContactProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string        `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FleetId   string        `protobuf:"bytes,2,opt,name=FleetId,proto3" json:"FleetId,omitempty"`
	ContactId string        `protobuf:"bytes,3,opt,name=ContactId,proto3" json:"ContactId,omitempty"`
	Primary   bool          `protobuf:"varint,4,opt,name=Primary,proto3" json:"Primary,omitempty"`
	Fleet     *FleetProto   `protobuf:"bytes,5,opt,name=Fleet,proto3" json:"Fleet,omitempty"`
	Contact   *ContactProto `protobuf:"bytes,6,opt,name=Contact,proto3" json:"Contact,omitempty"`
}

func (x *FleetContactProto) Reset() {
	*x = FleetContactProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleetContactProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleetContactProto) ProtoMessage() {}

func (x *FleetContactProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleetContactProto.ProtoReflect.Descriptor instead.
func (*FleetContactProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{19}
}

func (x *FleetContactProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FleetContactProto) GetFleetId() string {
	if x != nil {
		return x.FleetId
	}
	return ""
}

func (x *FleetContactProto) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *FleetContactProto) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *FleetContactProto) GetFleet() *FleetProto {
	if x != nil {
		return x.Fleet
	}
	return nil
}

func (x *FleetContactProto) GetContact() *ContactProto {
	if x != nil {
		return x.Contact
	}
	return nil
}

type FleetLocationProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string        `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FleetId   string        `protobuf:"bytes,2,opt,name=FleetId,proto3" json:"FleetId,omitempty"`
	AddressId string        `protobuf:"bytes,3,opt,name=AddressId,proto3" json:"AddressId,omitempty"`
	Primary   bool          `protobuf:"varint,4,opt,name=Primary,proto3" json:"Primary,omitempty"`
	Fleet     *FleetProto   `protobuf:"bytes,5,opt,name=Fleet,proto3" json:"Fleet,omitempty"`
	Address   *AddressProto `protobuf:"bytes,6,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *FleetLocationProto) Reset() {
	*x = FleetLocationProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleetLocationProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleetLocationProto) ProtoMessage() {}

func (x *FleetLocationProto) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleetLocationProto.ProtoReflect.Descriptor instead.
func (*FleetLocationProto) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{20}
}

func (x *FleetLocationProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FleetLocationProto) GetFleetId() string {
	if x != nil {
		return x.FleetId
	}
	return ""
}

func (x *FleetLocationProto) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

func (x *FleetLocationProto) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *FleetLocationProto) GetFleet() *FleetProto {
	if x != nil {
		return x.Fleet
	}
	return nil
}

func (x *FleetLocationProto) GetAddress() *AddressProto {
	if x != nil {
		return x.Address
	}
	return nil
}

type ResponseError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsError      bool   `protobuf:"varint,1,opt,name=IsError,proto3" json:"IsError,omitempty"`
	ErrorMessage []byte `protobuf:"bytes,2,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
}

func (x *ResponseError) Reset() {
	*x = ResponseError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseError) ProtoMessage() {}

func (x *ResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseError.ProtoReflect.Descriptor instead.
func (*ResponseError) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{21}
}

func (x *ResponseError) GetIsError() bool {
	if x != nil {
		return x.IsError
	}
	return false
}

func (x *ResponseError) GetErrorMessage() []byte {
	if x != nil {
		return x.ErrorMessage
	}
	return nil
}

type RequestVehicleAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleAddress *VehicleAddressProto `protobuf:"bytes,1,opt,name=VehicleAddress,proto3" json:"VehicleAddress,omitempty"`
}

func (x *RequestVehicleAddress) Reset() {
	*x = RequestVehicleAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestVehicleAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVehicleAddress) ProtoMessage() {}

func (x *RequestVehicleAddress) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVehicleAddress.ProtoReflect.Descriptor instead.
func (*RequestVehicleAddress) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{22}
}

func (x *RequestVehicleAddress) GetVehicleAddress() *VehicleAddressProto {
	if x != nil {
		return x.VehicleAddress
	}
	return nil
}

type RequestVehicleHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleHistory *VehicleHistoryProto `protobuf:"bytes,1,opt,name=VehicleHistory,proto3" json:"VehicleHistory,omitempty"`
}

func (x *RequestVehicleHistory) Reset() {
	*x = RequestVehicleHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestVehicleHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVehicleHistory) ProtoMessage() {}

func (x *RequestVehicleHistory) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVehicleHistory.ProtoReflect.Descriptor instead.
func (*RequestVehicleHistory) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{23}
}

func (x *RequestVehicleHistory) GetVehicleHistory() *VehicleHistoryProto {
	if x != nil {
		return x.VehicleHistory
	}
	return nil
}

type ResponseVehicleHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleHistory []*VehicleHistoryProto `protobuf:"bytes,1,rep,name=VehicleHistory,proto3" json:"VehicleHistory,omitempty"`
	Errors         *ResponseError         `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseVehicleHistory) Reset() {
	*x = ResponseVehicleHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseVehicleHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseVehicleHistory) ProtoMessage() {}

func (x *ResponseVehicleHistory) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseVehicleHistory.ProtoReflect.Descriptor instead.
func (*ResponseVehicleHistory) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{24}
}

func (x *ResponseVehicleHistory) GetVehicleHistory() []*VehicleHistoryProto {
	if x != nil {
		return x.VehicleHistory
	}
	return nil
}

func (x *ResponseVehicleHistory) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestVehicle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vehicle *VehicleProto `protobuf:"bytes,1,opt,name=Vehicle,proto3" json:"Vehicle,omitempty"`
}

func (x *RequestVehicle) Reset() {
	*x = RequestVehicle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestVehicle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVehicle) ProtoMessage() {}

func (x *RequestVehicle) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVehicle.ProtoReflect.Descriptor instead.
func (*RequestVehicle) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{25}
}

func (x *RequestVehicle) GetVehicle() *VehicleProto {
	if x != nil {
		return x.Vehicle
	}
	return nil
}

type ResponseVehicle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vehicles []*VehicleProto `protobuf:"bytes,1,rep,name=Vehicles,proto3" json:"Vehicles,omitempty"`
	Errors   *ResponseError  `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseVehicle) Reset() {
	*x = ResponseVehicle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseVehicle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseVehicle) ProtoMessage() {}

func (x *ResponseVehicle) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseVehicle.ProtoReflect.Descriptor instead.
func (*ResponseVehicle) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{26}
}

func (x *ResponseVehicle) GetVehicles() []*VehicleProto {
	if x != nil {
		return x.Vehicles
	}
	return nil
}

func (x *ResponseVehicle) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact *ContactProto `protobuf:"bytes,1,opt,name=Contact,proto3" json:"Contact,omitempty"`
}

func (x *RequestContact) Reset() {
	*x = RequestContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestContact) ProtoMessage() {}

func (x *RequestContact) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestContact.ProtoReflect.Descriptor instead.
func (*RequestContact) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{27}
}

func (x *RequestContact) GetContact() *ContactProto {
	if x != nil {
		return x.Contact
	}
	return nil
}

type ResponseCreateSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool           `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Id      string         `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Errors  *ResponseError `protobuf:"bytes,3,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseCreateSuccess) Reset() {
	*x = ResponseCreateSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCreateSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCreateSuccess) ProtoMessage() {}

func (x *ResponseCreateSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCreateSuccess.ProtoReflect.Descriptor instead.
func (*ResponseCreateSuccess) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{28}
}

func (x *ResponseCreateSuccess) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResponseCreateSuccess) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResponseCreateSuccess) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *RequestKey) Reset() {
	*x = RequestKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestKey) ProtoMessage() {}

func (x *RequestKey) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestKey.ProtoReflect.Descriptor instead.
func (*RequestKey) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{29}
}

func (x *RequestKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ResponseSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool           `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Errors  *ResponseError `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseSuccess) Reset() {
	*x = ResponseSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseSuccess) ProtoMessage() {}

func (x *ResponseSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseSuccess.ProtoReflect.Descriptor instead.
func (*ResponseSuccess) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{30}
}

func (x *ResponseSuccess) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResponseSuccess) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *RequestDelete) Reset() {
	*x = RequestDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDelete) ProtoMessage() {}

func (x *RequestDelete) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDelete.ProtoReflect.Descriptor instead.
func (*RequestDelete) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{31}
}

func (x *RequestDelete) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ResponseContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact *ContactProto  `protobuf:"bytes,1,opt,name=Contact,proto3" json:"Contact,omitempty"`
	Errors  *ResponseError `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseContact) Reset() {
	*x = ResponseContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseContact) ProtoMessage() {}

func (x *ResponseContact) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseContact.ProtoReflect.Descriptor instead.
func (*ResponseContact) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{32}
}

func (x *ResponseContact) GetContact() *ContactProto {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *ResponseContact) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *AddressProto `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *RequestAddress) Reset() {
	*x = RequestAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAddress) ProtoMessage() {}

func (x *RequestAddress) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAddress.ProtoReflect.Descriptor instead.
func (*RequestAddress) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{33}
}

func (x *RequestAddress) GetAddress() *AddressProto {
	if x != nil {
		return x.Address
	}
	return nil
}

type RequestByName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *RequestByName) Reset() {
	*x = RequestByName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestByName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestByName) ProtoMessage() {}

func (x *RequestByName) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestByName.ProtoReflect.Descriptor instead.
func (*RequestByName) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{34}
}

func (x *RequestByName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ResponseAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*AddressProto `protobuf:"bytes,1,rep,name=Address,proto3" json:"Address,omitempty"`
	Errors  *ResponseError  `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseAddress) Reset() {
	*x = ResponseAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseAddress) ProtoMessage() {}

func (x *ResponseAddress) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseAddress.ProtoReflect.Descriptor instead.
func (*ResponseAddress) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{35}
}

func (x *ResponseAddress) GetAddress() []*AddressProto {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ResponseAddress) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company *CompanyProto `protobuf:"bytes,1,opt,name=Company,proto3" json:"Company,omitempty"`
}

func (x *RequestCompany) Reset() {
	*x = RequestCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCompany) ProtoMessage() {}

func (x *RequestCompany) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCompany.ProtoReflect.Descriptor instead.
func (*RequestCompany) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{36}
}

func (x *RequestCompany) GetCompany() *CompanyProto {
	if x != nil {
		return x.Company
	}
	return nil
}

type RequestAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressType *AddressTypeProto `protobuf:"bytes,1,opt,name=AddressType,proto3" json:"AddressType,omitempty"`
}

func (x *RequestAddressType) Reset() {
	*x = RequestAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAddressType) ProtoMessage() {}

func (x *RequestAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAddressType.ProtoReflect.Descriptor instead.
func (*RequestAddressType) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{37}
}

func (x *RequestAddressType) GetAddressType() *AddressTypeProto {
	if x != nil {
		return x.AddressType
	}
	return nil
}

type ResponseAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressType []*AddressTypeProto `protobuf:"bytes,1,rep,name=AddressType,proto3" json:"AddressType,omitempty"`
	Errors      *ResponseError      `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseAddressType) Reset() {
	*x = ResponseAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseAddressType) ProtoMessage() {}

func (x *ResponseAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseAddressType.ProtoReflect.Descriptor instead.
func (*ResponseAddressType) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{38}
}

func (x *ResponseAddressType) GetAddressType() []*AddressTypeProto {
	if x != nil {
		return x.AddressType
	}
	return nil
}

func (x *ResponseAddressType) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *RegionProto `protobuf:"bytes,1,opt,name=Region,proto3" json:"Region,omitempty"`
}

func (x *RequestRegion) Reset() {
	*x = RequestRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRegion) ProtoMessage() {}

func (x *RequestRegion) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRegion.ProtoReflect.Descriptor instead.
func (*RequestRegion) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{39}
}

func (x *RequestRegion) GetRegion() *RegionProto {
	if x != nil {
		return x.Region
	}
	return nil
}

type ResponseRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region []*RegionProto `protobuf:"bytes,1,rep,name=Region,proto3" json:"Region,omitempty"`
	Errors *ResponseError `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseRegion) Reset() {
	*x = ResponseRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseRegion) ProtoMessage() {}

func (x *ResponseRegion) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseRegion.ProtoReflect.Descriptor instead.
func (*ResponseRegion) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{40}
}

func (x *ResponseRegion) GetRegion() []*RegionProto {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *ResponseRegion) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *StateProto `protobuf:"bytes,1,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *RequestState) Reset() {
	*x = RequestState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestState) ProtoMessage() {}

func (x *RequestState) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestState.ProtoReflect.Descriptor instead.
func (*RequestState) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{41}
}

func (x *RequestState) GetState() *StateProto {
	if x != nil {
		return x.State
	}
	return nil
}

type ResponseState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State  []*StateProto  `protobuf:"bytes,1,rep,name=State,proto3" json:"State,omitempty"`
	Errors *ResponseError `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseState) Reset() {
	*x = ResponseState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseState) ProtoMessage() {}

func (x *ResponseState) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseState.ProtoReflect.Descriptor instead.
func (*ResponseState) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{42}
}

func (x *ResponseState) GetState() []*StateProto {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ResponseState) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ResponseVehicleAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*VehicleAddressProto `protobuf:"bytes,1,rep,name=Address,proto3" json:"Address,omitempty"`
	Errors  *ResponseError         `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseVehicleAddress) Reset() {
	*x = ResponseVehicleAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseVehicleAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseVehicleAddress) ProtoMessage() {}

func (x *ResponseVehicleAddress) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseVehicleAddress.ProtoReflect.Descriptor instead.
func (*ResponseVehicleAddress) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{43}
}

func (x *ResponseVehicleAddress) GetAddress() []*VehicleAddressProto {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ResponseVehicleAddress) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestVehicleMake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleMake *VehicleMakeProto `protobuf:"bytes,1,opt,name=VehicleMake,proto3" json:"VehicleMake,omitempty"`
}

func (x *RequestVehicleMake) Reset() {
	*x = RequestVehicleMake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestVehicleMake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVehicleMake) ProtoMessage() {}

func (x *RequestVehicleMake) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVehicleMake.ProtoReflect.Descriptor instead.
func (*RequestVehicleMake) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{44}
}

func (x *RequestVehicleMake) GetVehicleMake() *VehicleMakeProto {
	if x != nil {
		return x.VehicleMake
	}
	return nil
}

type ResponseVehicleMake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleMake []*VehicleMakeProto `protobuf:"bytes,1,rep,name=VehicleMake,proto3" json:"VehicleMake,omitempty"`
	Errors      *ResponseError      `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseVehicleMake) Reset() {
	*x = ResponseVehicleMake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseVehicleMake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseVehicleMake) ProtoMessage() {}

func (x *ResponseVehicleMake) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseVehicleMake.ProtoReflect.Descriptor instead.
func (*ResponseVehicleMake) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{45}
}

func (x *ResponseVehicleMake) GetVehicleMake() []*VehicleMakeProto {
	if x != nil {
		return x.VehicleMake
	}
	return nil
}

func (x *ResponseVehicleMake) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestVehicleModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleModel *VehicleModelProto `protobuf:"bytes,1,opt,name=VehicleModel,proto3" json:"VehicleModel,omitempty"`
}

func (x *RequestVehicleModel) Reset() {
	*x = RequestVehicleModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestVehicleModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVehicleModel) ProtoMessage() {}

func (x *RequestVehicleModel) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVehicleModel.ProtoReflect.Descriptor instead.
func (*RequestVehicleModel) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{46}
}

func (x *RequestVehicleModel) GetVehicleModel() *VehicleModelProto {
	if x != nil {
		return x.VehicleModel
	}
	return nil
}

type ResponseVehicleModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleModel []*VehicleModelProto `protobuf:"bytes,1,rep,name=VehicleModel,proto3" json:"VehicleModel,omitempty"`
	Errors       *ResponseError       `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseVehicleModel) Reset() {
	*x = ResponseVehicleModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseVehicleModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseVehicleModel) ProtoMessage() {}

func (x *ResponseVehicleModel) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseVehicleModel.ProtoReflect.Descriptor instead.
func (*ResponseVehicleModel) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{47}
}

func (x *ResponseVehicleModel) GetVehicleModel() []*VehicleModelProto {
	if x != nil {
		return x.VehicleModel
	}
	return nil
}

func (x *ResponseVehicleModel) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestVehicleReg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleReg *VehicleTrackRegProto `protobuf:"bytes,1,opt,name=VehicleReg,proto3" json:"VehicleReg,omitempty"`
}

func (x *RequestVehicleReg) Reset() {
	*x = RequestVehicleReg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestVehicleReg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVehicleReg) ProtoMessage() {}

func (x *RequestVehicleReg) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVehicleReg.ProtoReflect.Descriptor instead.
func (*RequestVehicleReg) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{48}
}

func (x *RequestVehicleReg) GetVehicleReg() *VehicleTrackRegProto {
	if x != nil {
		return x.VehicleReg
	}
	return nil
}

type ResponseVehicleReg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleReg []*VehicleTrackRegProto `protobuf:"bytes,1,rep,name=VehicleReg,proto3" json:"VehicleReg,omitempty"`
	Errors     *ResponseError          `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseVehicleReg) Reset() {
	*x = ResponseVehicleReg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseVehicleReg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseVehicleReg) ProtoMessage() {}

func (x *ResponseVehicleReg) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseVehicleReg.ProtoReflect.Descriptor instead.
func (*ResponseVehicleReg) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{49}
}

func (x *ResponseVehicleReg) GetVehicleReg() []*VehicleTrackRegProto {
	if x != nil {
		return x.VehicleReg
	}
	return nil
}

func (x *ResponseVehicleReg) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestVehicleStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleStatus *VehicleStatusProto `protobuf:"bytes,1,opt,name=VehicleStatus,proto3" json:"VehicleStatus,omitempty"`
}

func (x *RequestVehicleStatus) Reset() {
	*x = RequestVehicleStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestVehicleStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVehicleStatus) ProtoMessage() {}

func (x *RequestVehicleStatus) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVehicleStatus.ProtoReflect.Descriptor instead.
func (*RequestVehicleStatus) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{50}
}

func (x *RequestVehicleStatus) GetVehicleStatus() *VehicleStatusProto {
	if x != nil {
		return x.VehicleStatus
	}
	return nil
}

type ResponseVehicleStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleStatus []*VehicleStatusProto `protobuf:"bytes,1,rep,name=VehicleStatus,proto3" json:"VehicleStatus,omitempty"`
	Errors        *ResponseError        `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseVehicleStatus) Reset() {
	*x = ResponseVehicleStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseVehicleStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseVehicleStatus) ProtoMessage() {}

func (x *ResponseVehicleStatus) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseVehicleStatus.ProtoReflect.Descriptor instead.
func (*ResponseVehicleStatus) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{51}
}

func (x *ResponseVehicleStatus) GetVehicleStatus() []*VehicleStatusProto {
	if x != nil {
		return x.VehicleStatus
	}
	return nil
}

func (x *ResponseVehicleStatus) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestVehicleOprBound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleOprBound *VehicleOperatorBoundProto `protobuf:"bytes,1,opt,name=VehicleOprBound,proto3" json:"VehicleOprBound,omitempty"`
}

func (x *RequestVehicleOprBound) Reset() {
	*x = RequestVehicleOprBound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestVehicleOprBound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVehicleOprBound) ProtoMessage() {}

func (x *RequestVehicleOprBound) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVehicleOprBound.ProtoReflect.Descriptor instead.
func (*RequestVehicleOprBound) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{52}
}

func (x *RequestVehicleOprBound) GetVehicleOprBound() *VehicleOperatorBoundProto {
	if x != nil {
		return x.VehicleOprBound
	}
	return nil
}

type ResponseVehicleOprBound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleOprBound []*VehicleOperatorBoundProto `protobuf:"bytes,1,rep,name=VehicleOprBound,proto3" json:"VehicleOprBound,omitempty"`
	Errors          *ResponseError               `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseVehicleOprBound) Reset() {
	*x = ResponseVehicleOprBound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseVehicleOprBound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseVehicleOprBound) ProtoMessage() {}

func (x *ResponseVehicleOprBound) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseVehicleOprBound.ProtoReflect.Descriptor instead.
func (*ResponseVehicleOprBound) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{53}
}

func (x *ResponseVehicleOprBound) GetVehicleOprBound() []*VehicleOperatorBoundProto {
	if x != nil {
		return x.VehicleOprBound
	}
	return nil
}

func (x *ResponseVehicleOprBound) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator *OperatorProto `protobuf:"bytes,1,opt,name=Operator,proto3" json:"Operator,omitempty"`
}

func (x *RequestOperator) Reset() {
	*x = RequestOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestOperator) ProtoMessage() {}

func (x *RequestOperator) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestOperator.ProtoReflect.Descriptor instead.
func (*RequestOperator) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{54}
}

func (x *RequestOperator) GetOperator() *OperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

type ResponseOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator []*OperatorProto `protobuf:"bytes,1,rep,name=Operator,proto3" json:"Operator,omitempty"`
	Errors   *ResponseError   `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseOperator) Reset() {
	*x = ResponseOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseOperator) ProtoMessage() {}

func (x *ResponseOperator) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseOperator.ProtoReflect.Descriptor instead.
func (*ResponseOperator) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{55}
}

func (x *ResponseOperator) GetOperator() []*OperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *ResponseOperator) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestOperatorContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ContactId  string `protobuf:"bytes,2,opt,name=ContactId,proto3" json:"ContactId,omitempty"`
	OperatorId string `protobuf:"bytes,3,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	Primary    bool   `protobuf:"varint,4,opt,name=Primary,proto3" json:"Primary,omitempty"`
}

func (x *RequestOperatorContact) Reset() {
	*x = RequestOperatorContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestOperatorContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestOperatorContact) ProtoMessage() {}

func (x *RequestOperatorContact) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestOperatorContact.ProtoReflect.Descriptor instead.
func (*RequestOperatorContact) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{56}
}

func (x *RequestOperatorContact) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestOperatorContact) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *RequestOperatorContact) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *RequestOperatorContact) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

type ResponseOperatorContacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorContacts []*OperatorContactsProto `protobuf:"bytes,1,rep,name=OperatorContacts,proto3" json:"OperatorContacts,omitempty"`
	Errors           *ResponseError           `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseOperatorContacts) Reset() {
	*x = ResponseOperatorContacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseOperatorContacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseOperatorContacts) ProtoMessage() {}

func (x *ResponseOperatorContacts) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseOperatorContacts.ProtoReflect.Descriptor instead.
func (*ResponseOperatorContacts) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{57}
}

func (x *ResponseOperatorContacts) GetOperatorContacts() []*OperatorContactsProto {
	if x != nil {
		return x.OperatorContacts
	}
	return nil
}

func (x *ResponseOperatorContacts) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestOperatorLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorLocation *OperatorLocationProto `protobuf:"bytes,1,opt,name=OperatorLocation,proto3" json:"OperatorLocation,omitempty"`
}

func (x *RequestOperatorLocation) Reset() {
	*x = RequestOperatorLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestOperatorLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestOperatorLocation) ProtoMessage() {}

func (x *RequestOperatorLocation) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestOperatorLocation.ProtoReflect.Descriptor instead.
func (*RequestOperatorLocation) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{58}
}

func (x *RequestOperatorLocation) GetOperatorLocation() *OperatorLocationProto {
	if x != nil {
		return x.OperatorLocation
	}
	return nil
}

type ResponseOperatorLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorLocation []*OperatorLocationProto `protobuf:"bytes,1,rep,name=OperatorLocation,proto3" json:"OperatorLocation,omitempty"`
	Errors           *ResponseError           `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseOperatorLocation) Reset() {
	*x = ResponseOperatorLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseOperatorLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseOperatorLocation) ProtoMessage() {}

func (x *ResponseOperatorLocation) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseOperatorLocation.ProtoReflect.Descriptor instead.
func (*ResponseOperatorLocation) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{59}
}

func (x *ResponseOperatorLocation) GetOperatorLocation() []*OperatorLocationProto {
	if x != nil {
		return x.OperatorLocation
	}
	return nil
}

func (x *ResponseOperatorLocation) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestFleet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fleet *FleetProto `protobuf:"bytes,1,opt,name=Fleet,proto3" json:"Fleet,omitempty"`
}

func (x *RequestFleet) Reset() {
	*x = RequestFleet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestFleet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestFleet) ProtoMessage() {}

func (x *RequestFleet) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestFleet.ProtoReflect.Descriptor instead.
func (*RequestFleet) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{60}
}

func (x *RequestFleet) GetFleet() *FleetProto {
	if x != nil {
		return x.Fleet
	}
	return nil
}

type ResponseFleet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fleet  []*FleetProto  `protobuf:"bytes,1,rep,name=Fleet,proto3" json:"Fleet,omitempty"`
	Errors *ResponseError `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseFleet) Reset() {
	*x = ResponseFleet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFleet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFleet) ProtoMessage() {}

func (x *ResponseFleet) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFleet.ProtoReflect.Descriptor instead.
func (*ResponseFleet) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{61}
}

func (x *ResponseFleet) GetFleet() []*FleetProto {
	if x != nil {
		return x.Fleet
	}
	return nil
}

func (x *ResponseFleet) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestFleetContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FleetId   string `protobuf:"bytes,2,opt,name=FleetId,proto3" json:"FleetId,omitempty"`
	ContactId string `protobuf:"bytes,3,opt,name=ContactId,proto3" json:"ContactId,omitempty"`
	Primary   bool   `protobuf:"varint,4,opt,name=Primary,proto3" json:"Primary,omitempty"`
}

func (x *RequestFleetContact) Reset() {
	*x = RequestFleetContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestFleetContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestFleetContact) ProtoMessage() {}

func (x *RequestFleetContact) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestFleetContact.ProtoReflect.Descriptor instead.
func (*RequestFleetContact) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{62}
}

func (x *RequestFleetContact) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestFleetContact) GetFleetId() string {
	if x != nil {
		return x.FleetId
	}
	return ""
}

func (x *RequestFleetContact) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *RequestFleetContact) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

type ResponseFleetContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FleetContact []*FleetContactProto `protobuf:"bytes,1,rep,name=FleetContact,proto3" json:"FleetContact,omitempty"`
	Errors       *ResponseError       `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseFleetContact) Reset() {
	*x = ResponseFleetContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFleetContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFleetContact) ProtoMessage() {}

func (x *ResponseFleetContact) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFleetContact.ProtoReflect.Descriptor instead.
func (*ResponseFleetContact) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{63}
}

func (x *ResponseFleetContact) GetFleetContact() []*FleetContactProto {
	if x != nil {
		return x.FleetContact
	}
	return nil
}

func (x *ResponseFleetContact) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RequestFleetLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FleetId   string `protobuf:"bytes,2,opt,name=FleetId,proto3" json:"FleetId,omitempty"`
	AddressId string `protobuf:"bytes,3,opt,name=AddressId,proto3" json:"AddressId,omitempty"`
	Primary   bool   `protobuf:"varint,4,opt,name=Primary,proto3" json:"Primary,omitempty"`
}

func (x *RequestFleetLocation) Reset() {
	*x = RequestFleetLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestFleetLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestFleetLocation) ProtoMessage() {}

func (x *RequestFleetLocation) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestFleetLocation.ProtoReflect.Descriptor instead.
func (*RequestFleetLocation) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{64}
}

func (x *RequestFleetLocation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestFleetLocation) GetFleetId() string {
	if x != nil {
		return x.FleetId
	}
	return ""
}

func (x *RequestFleetLocation) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

func (x *RequestFleetLocation) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

type ResponseFleetLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FleetLocation []*FleetLocationProto `protobuf:"bytes,1,rep,name=FleetLocation,proto3" json:"FleetLocation,omitempty"`
	Errors        *ResponseError        `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ResponseFleetLocation) Reset() {
	*x = ResponseFleetLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFleetLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFleetLocation) ProtoMessage() {}

func (x *ResponseFleetLocation) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFleetLocation.ProtoReflect.Descriptor instead.
func (*ResponseFleetLocation) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{65}
}

func (x *ResponseFleetLocation) GetFleetLocation() []*FleetLocationProto {
	if x != nil {
		return x.FleetLocation
	}
	return nil
}

func (x *ResponseFleetLocation) GetErrors() *ResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_master_proto protoreflect.FileDescriptor

var file_master_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x4e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x22, 0xcf, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x36,
	0x0a, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd9, 0x03,
	0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x75, 0x72, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x75, 0x62, 0x75, 0x72, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x0c, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x10, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x4d, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x6b,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x61, 0x6b, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0xf0, 0x01, 0x0a, 0x11, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x6b, 0x65, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x61, 0x6b, 0x65, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x4d, 0x61, 0x6b, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x4d,
	0x61, 0x6b, 0x65, 0x22, 0xae, 0x04, 0x0a, 0x0a, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x46, 0x6c, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x53, 0x75, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x47,
	0x0a, 0x0d, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x13, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8e, 0x03, 0x0a, 0x0d, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x53, 0x75, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x63,
	0x12, 0x36, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x22, 0xb4, 0x02, 0x0a, 0x15, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x3e, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0xbc, 0x01, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22,
	0xfe, 0x01, 0x0a, 0x19, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x22, 0xed, 0x02, 0x0a, 0x14, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x22, 0xc1, 0x05, 0x0a, 0x0c, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4d,
	0x61, 0x6b, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x61, 0x6b,
	0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x6c, 0x65, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x47, 0x0a, 0x0b, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61,
	0x6b, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0b, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x12, 0x3f, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a,
	0x09, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x95, 0x03, 0x0a, 0x13, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x46, 0x72, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x54, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x08, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe9, 0x01, 0x0a,
	0x11, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0xea, 0x01, 0x0a, 0x12, 0x46, 0x6c, 0x65,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x35, 0x0a, 0x05, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x05, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4d, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a,
	0x0e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x69, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x0e, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xa6, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x0e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x4d, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x22, 0x4d, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x22, 0x7d, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22,
	0x1c, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x67, 0x0a,
	0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x1f, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x4d, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x23, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x4d, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x22, 0x5d, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x22, 0x49, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x45, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x22, 0x98, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x5d, 0x0a, 0x12, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b,
	0x65, 0x12, 0x47, 0x0a, 0x0b, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61,
	0x6b, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x61, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x4a,
	0x0a, 0x0c, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x9e, 0x01, 0x0a, 0x14, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x0c, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0c, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x5e, 0x0a, 0x11, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67,
	0x12, 0x49, 0x0a, 0x0a, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0a, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x22, 0x9b, 0x01, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x67, 0x12, 0x49, 0x0a, 0x0a, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0a, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x12, 0x3a, 0x0a,
	0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x65, 0x0a, 0x14, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0d, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xa2, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x72, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x70, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x58, 0x0a, 0x0f, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x70, 0x72, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x4f, 0x70, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x17, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x70, 0x72,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x58, 0x0a, 0x0f, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x4f, 0x70, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x70, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x51, 0x0a, 0x0f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3e,
	0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x8e,
	0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22,
	0x80, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x22, 0xae, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12,
	0x56, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x71, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56,
	0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x45, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x46, 0x6c, 0x65, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x65,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x22, 0x82,
	0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x65, 0x65, 0x74,
	0x12, 0x35, 0x0a, 0x05, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x05, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x77, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c,
	0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x6c,
	0x65, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x6c, 0x65,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x9e, 0x01, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x78, 0x0a,
	0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x0d, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x46,
	0x6c, 0x65, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0d, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x32, 0x9e, 0x47, 0x0a,
	0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x23, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x5a, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x22, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x68, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x62, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x1a,
	0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5d, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x24,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x28, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x64, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x66, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x1a,
	0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x58, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x1a,
	0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x58, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x4b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x23,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x5c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x53,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1f,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a,
	0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x22, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x58, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5a, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x1a, 0x24, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x54,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x24,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x60, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5a, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x24, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x59, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79,
	0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x24,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x65, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x56, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x65,
	0x74, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46,
	0x6c, 0x65, 0x65, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x24, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x1a, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x12, 0x6a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x28,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x65, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x64, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x28, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5e, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x79, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x1a, 0x29, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x6c, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x66, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x46, 0x6c, 0x65, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x24, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x65,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x24,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x63, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x2a, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x65, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5a, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x25, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x61, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x42, 0x79, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x25,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x70, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2b,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x6a, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x1a, 0x24, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x6a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4b, 0x65, 0x79, 0x1a, 0x2d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x72, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x6c, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x24,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x62, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x6f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x2d, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x1a,
	0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5a, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x24, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x64, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x24, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x12, 0x5d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x42, 0x79, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x12, 0x6e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x68, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x60, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x6c, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x79, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x2b, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x6f, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a,
	0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x69, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x6b, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x2b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x68, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x12, 0x27, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x4d, 0x61, 0x6b, 0x65, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x62, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x4d, 0x61, 0x6b, 0x65, 0x12, 0x27, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x1a, 0x24,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x5d, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x24, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x12, 0x6a, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x28, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x2a, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x64, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x28, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5e, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x79, 0x4d, 0x61,
	0x6b, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4b, 0x65, 0x79, 0x1a, 0x29, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x5a,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1f,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a,
	0x29, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x66, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x12, 0x26,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x60, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x1a, 0x24,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x24, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x6a, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x12, 0x6d,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x12, 0x6c, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x66, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x24, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x24,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x6f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x4f, 0x70, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x70, 0x72, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x69, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x4f, 0x70, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x70, 0x72,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x60, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x70, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_master_proto_rawDescOnce sync.Once
	file_master_proto_rawDescData = file_master_proto_rawDesc
)

func file_master_proto_rawDescGZIP() []byte {
	file_master_proto_rawDescOnce.Do(func() {
		file_master_proto_rawDescData = protoimpl.X.CompressGZIP(file_master_proto_rawDescData)
	})
	return file_master_proto_rawDescData
}

var file_master_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_master_proto_goTypes = []interface{}{
	(*StateProto)(nil),                // 0: go.micro.srv.master.StateProto
	(*CountryProto)(nil),              // 1: go.micro.srv.master.CountryProto
	(*ContactProto)(nil),              // 2: go.micro.srv.master.ContactProto
	(*AddressTypeProto)(nil),          // 3: go.micro.srv.master.AddressTypeProto
	(*RegionProto)(nil),               // 4: go.micro.srv.master.RegionProto
	(*AddressProto)(nil),              // 5: go.micro.srv.master.AddressProto
	(*CompanyProto)(nil),              // 6: go.micro.srv.master.CompanyProto
	(*VehicleMakeProto)(nil),          // 7: go.micro.srv.master.VehicleMakeProto
	(*VehicleModelProto)(nil),         // 8: go.micro.srv.master.VehicleModelProto
	(*FleetProto)(nil),                // 9: go.micro.srv.master.FleetProto
	(*VehicleStatusProto)(nil),        // 10: go.micro.srv.master.VehicleStatusProto
	(*VehicleAddressProto)(nil),       // 11: go.micro.srv.master.VehicleAddressProto
	(*OperatorProto)(nil),             // 12: go.micro.srv.master.OperatorProto
	(*OperatorLocationProto)(nil),     // 13: go.micro.srv.master.OperatorLocationProto
	(*OperatorContactsProto)(nil),     // 14: go.micro.srv.master.OperatorContactsProto
	(*VehicleOperatorBoundProto)(nil), // 15: go.micro.srv.master.VehicleOperatorBoundProto
	(*VehicleTrackRegProto)(nil),      // 16: go.micro.srv.master.VehicleTrackRegProto
	(*VehicleProto)(nil),              // 17: go.micro.srv.master.VehicleProto
	(*VehicleHistoryProto)(nil),       // 18: go.micro.srv.master.VehicleHistoryProto
	(*FleetContactProto)(nil),         // 19: go.micro.srv.master.FleetContactProto
	(*FleetLocationProto)(nil),        // 20: go.micro.srv.master.FleetLocationProto
	(*ResponseError)(nil),             // 21: go.micro.srv.master.ResponseError
	(*RequestVehicleAddress)(nil),     // 22: go.micro.srv.master.RequestVehicleAddress
	(*RequestVehicleHistory)(nil),     // 23: go.micro.srv.master.RequestVehicleHistory
	(*ResponseVehicleHistory)(nil),    // 24: go.micro.srv.master.ResponseVehicleHistory
	(*RequestVehicle)(nil),            // 25: go.micro.srv.master.RequestVehicle
	(*ResponseVehicle)(nil),           // 26: go.micro.srv.master.ResponseVehicle
	(*RequestContact)(nil),            // 27: go.micro.srv.master.RequestContact
	(*ResponseCreateSuccess)(nil),     // 28: go.micro.srv.master.ResponseCreateSuccess
	(*RequestKey)(nil),                // 29: go.micro.srv.master.RequestKey
	(*ResponseSuccess)(nil),           // 30: go.micro.srv.master.ResponseSuccess
	(*RequestDelete)(nil),             // 31: go.micro.srv.master.RequestDelete
	(*ResponseContact)(nil),           // 32: go.micro.srv.master.ResponseContact
	(*RequestAddress)(nil),            // 33: go.micro.srv.master.RequestAddress
	(*RequestByName)(nil),             // 34: go.micro.srv.master.RequestByName
	(*ResponseAddress)(nil),           // 35: go.micro.srv.master.ResponseAddress
	(*RequestCompany)(nil),            // 36: go.micro.srv.master.RequestCompany
	(*RequestAddressType)(nil),        // 37: go.micro.srv.master.RequestAddressType
	(*ResponseAddressType)(nil),       // 38: go.micro.srv.master.ResponseAddressType
	(*RequestRegion)(nil),             // 39: go.micro.srv.master.RequestRegion
	(*ResponseRegion)(nil),            // 40: go.micro.srv.master.ResponseRegion
	(*RequestState)(nil),              // 41: go.micro.srv.master.RequestState
	(*ResponseState)(nil),             // 42: go.micro.srv.master.ResponseState
	(*ResponseVehicleAddress)(nil),    // 43: go.micro.srv.master.ResponseVehicleAddress
	(*RequestVehicleMake)(nil),        // 44: go.micro.srv.master.RequestVehicleMake
	(*ResponseVehicleMake)(nil),       // 45: go.micro.srv.master.ResponseVehicleMake
	(*RequestVehicleModel)(nil),       // 46: go.micro.srv.master.RequestVehicleModel
	(*ResponseVehicleModel)(nil),      // 47: go.micro.srv.master.ResponseVehicleModel
	(*RequestVehicleReg)(nil),         // 48: go.micro.srv.master.RequestVehicleReg
	(*ResponseVehicleReg)(nil),        // 49: go.micro.srv.master.ResponseVehicleReg
	(*RequestVehicleStatus)(nil),      // 50: go.micro.srv.master.RequestVehicleStatus
	(*ResponseVehicleStatus)(nil),     // 51: go.micro.srv.master.ResponseVehicleStatus
	(*RequestVehicleOprBound)(nil),    // 52: go.micro.srv.master.RequestVehicleOprBound
	(*ResponseVehicleOprBound)(nil),   // 53: go.micro.srv.master.ResponseVehicleOprBound
	(*RequestOperator)(nil),           // 54: go.micro.srv.master.RequestOperator
	(*ResponseOperator)(nil),          // 55: go.micro.srv.master.ResponseOperator
	(*RequestOperatorContact)(nil),    // 56: go.micro.srv.master.RequestOperatorContact
	(*ResponseOperatorContacts)(nil),  // 57: go.micro.srv.master.ResponseOperatorContacts
	(*RequestOperatorLocation)(nil),   // 58: go.micro.srv.master.RequestOperatorLocation
	(*ResponseOperatorLocation)(nil),  // 59: go.micro.srv.master.ResponseOperatorLocation
	(*RequestFleet)(nil),              // 60: go.micro.srv.master.RequestFleet
	(*ResponseFleet)(nil),             // 61: go.micro.srv.master.ResponseFleet
	(*RequestFleetContact)(nil),       // 62: go.micro.srv.master.RequestFleetContact
	(*ResponseFleetContact)(nil),      // 63: go.micro.srv.master.ResponseFleetContact
	(*RequestFleetLocation)(nil),      // 64: go.micro.srv.master.RequestFleetLocation
	(*ResponseFleetLocation)(nil),     // 65: go.micro.srv.master.ResponseFleetLocation
	(*timestamp.Timestamp)(nil),       // 66: google.protobuf.Timestamp
	(*empty.Empty)(nil),               // 67: google.protobuf.Empty
}
var file_master_proto_depIdxs = []int32{
	0,   // 0: go.micro.srv.master.CountryProto.States:type_name -> go.micro.srv.master.StateProto
	66,  // 1: go.micro.srv.master.CountryProto.UpdatedAt:type_name -> google.protobuf.Timestamp
	66,  // 2: go.micro.srv.master.ContactProto.UpdatedAt:type_name -> google.protobuf.Timestamp
	3,   // 3: go.micro.srv.master.AddressProto.AddressType:type_name -> go.micro.srv.master.AddressTypeProto
	0,   // 4: go.micro.srv.master.AddressProto.State:type_name -> go.micro.srv.master.StateProto
	1,   // 5: go.micro.srv.master.AddressProto.Country:type_name -> go.micro.srv.master.CountryProto
	66,  // 6: go.micro.srv.master.AddressProto.UpdatedAt:type_name -> google.protobuf.Timestamp
	5,   // 7: go.micro.srv.master.CompanyProto.Address:type_name -> go.micro.srv.master.AddressProto
	2,   // 8: go.micro.srv.master.CompanyProto.Contact:type_name -> go.micro.srv.master.ContactProto
	66,  // 9: go.micro.srv.master.VehicleMakeProto.UpdateAt:type_name -> google.protobuf.Timestamp
	1,   // 10: go.micro.srv.master.VehicleMakeProto.Country:type_name -> go.micro.srv.master.CountryProto
	66,  // 11: go.micro.srv.master.VehicleModelProto.UpdatedAt:type_name -> google.protobuf.Timestamp
	7,   // 12: go.micro.srv.master.VehicleModelProto.Make:type_name -> go.micro.srv.master.VehicleMakeProto
	66,  // 13: go.micro.srv.master.FleetProto.UpdatedAt:type_name -> google.protobuf.Timestamp
	66,  // 14: go.micro.srv.master.FleetProto.DateRegistered:type_name -> google.protobuf.Timestamp
	2,   // 15: go.micro.srv.master.FleetProto.FleetContacts:type_name -> go.micro.srv.master.ContactProto
	5,   // 16: go.micro.srv.master.FleetProto.Address:type_name -> go.micro.srv.master.AddressProto
	66,  // 17: go.micro.srv.master.VehicleStatusProto.UpdatedAt:type_name -> google.protobuf.Timestamp
	66,  // 18: go.micro.srv.master.VehicleAddressProto.UpdateAt:type_name -> google.protobuf.Timestamp
	5,   // 19: go.micro.srv.master.VehicleAddressProto.Address:type_name -> go.micro.srv.master.AddressProto
	66,  // 20: go.micro.srv.master.OperatorProto.UpdateAt:type_name -> google.protobuf.Timestamp
	13,  // 21: go.micro.srv.master.OperatorProto.Locations:type_name -> go.micro.srv.master.OperatorLocationProto
	14,  // 22: go.micro.srv.master.OperatorProto.Contacts:type_name -> go.micro.srv.master.OperatorContactsProto
	17,  // 23: go.micro.srv.master.OperatorProto.Vehicles:type_name -> go.micro.srv.master.VehicleProto
	66,  // 24: go.micro.srv.master.OperatorLocationProto.UpdateAt:type_name -> google.protobuf.Timestamp
	5,   // 25: go.micro.srv.master.OperatorLocationProto.Address:type_name -> go.micro.srv.master.AddressProto
	12,  // 26: go.micro.srv.master.OperatorLocationProto.Operator:type_name -> go.micro.srv.master.OperatorProto
	2,   // 27: go.micro.srv.master.OperatorContactsProto.Contact:type_name -> go.micro.srv.master.ContactProto
	12,  // 28: go.micro.srv.master.VehicleOperatorBoundProto.Operator:type_name -> go.micro.srv.master.OperatorProto
	17,  // 29: go.micro.srv.master.VehicleOperatorBoundProto.Vehicle:type_name -> go.micro.srv.master.VehicleProto
	66,  // 30: go.micro.srv.master.VehicleTrackRegProto.RegisterDate:type_name -> google.protobuf.Timestamp
	66,  // 31: go.micro.srv.master.VehicleTrackRegProto.ExpiredDate:type_name -> google.protobuf.Timestamp
	66,  // 32: go.micro.srv.master.VehicleTrackRegProto.UpdatedAt:type_name -> google.protobuf.Timestamp
	17,  // 33: go.micro.srv.master.VehicleTrackRegProto.Vehicle:type_name -> go.micro.srv.master.VehicleProto
	66,  // 34: go.micro.srv.master.VehicleProto.UpdatedAt:type_name -> google.protobuf.Timestamp
	8,   // 35: go.micro.srv.master.VehicleProto.VehicleModel:type_name -> go.micro.srv.master.VehicleModelProto
	7,   // 36: go.micro.srv.master.VehicleProto.VehicleMake:type_name -> go.micro.srv.master.VehicleMakeProto
	10,  // 37: go.micro.srv.master.VehicleProto.Status:type_name -> go.micro.srv.master.VehicleStatusProto
	11,  // 38: go.micro.srv.master.VehicleProto.Locations:type_name -> go.micro.srv.master.VehicleAddressProto
	15,  // 39: go.micro.srv.master.VehicleProto.Operators:type_name -> go.micro.srv.master.VehicleOperatorBoundProto
	16,  // 40: go.micro.srv.master.VehicleProto.Registrations:type_name -> go.micro.srv.master.VehicleTrackRegProto
	66,  // 41: go.micro.srv.master.VehicleHistoryProto.ChangeDate:type_name -> google.protobuf.Timestamp
	10,  // 42: go.micro.srv.master.VehicleHistoryProto.FromStatus:type_name -> go.micro.srv.master.VehicleStatusProto
	10,  // 43: go.micro.srv.master.VehicleHistoryProto.ToStatus:type_name -> go.micro.srv.master.VehicleStatusProto
	9,   // 44: go.micro.srv.master.FleetContactProto.Fleet:type_name -> go.micro.srv.master.FleetProto
	2,   // 45: go.micro.srv.master.FleetContactProto.Contact:type_name -> go.micro.srv.master.ContactProto
	9,   // 46: go.micro.srv.master.FleetLocationProto.Fleet:type_name -> go.micro.srv.master.FleetProto
	5,   // 47: go.micro.srv.master.FleetLocationProto.Address:type_name -> go.micro.srv.master.AddressProto
	11,  // 48: go.micro.srv.master.RequestVehicleAddress.VehicleAddress:type_name -> go.micro.srv.master.VehicleAddressProto
	18,  // 49: go.micro.srv.master.RequestVehicleHistory.VehicleHistory:type_name -> go.micro.srv.master.VehicleHistoryProto
	18,  // 50: go.micro.srv.master.ResponseVehicleHistory.VehicleHistory:type_name -> go.micro.srv.master.VehicleHistoryProto
	21,  // 51: go.micro.srv.master.ResponseVehicleHistory.Errors:type_name -> go.micro.srv.master.ResponseError
	17,  // 52: go.micro.srv.master.RequestVehicle.Vehicle:type_name -> go.micro.srv.master.VehicleProto
	17,  // 53: go.micro.srv.master.ResponseVehicle.Vehicles:type_name -> go.micro.srv.master.VehicleProto
	21,  // 54: go.micro.srv.master.ResponseVehicle.Errors:type_name -> go.micro.srv.master.ResponseError
	2,   // 55: go.micro.srv.master.RequestContact.Contact:type_name -> go.micro.srv.master.ContactProto
	21,  // 56: go.micro.srv.master.ResponseCreateSuccess.Errors:type_name -> go.micro.srv.master.ResponseError
	21,  // 57: go.micro.srv.master.ResponseSuccess.Errors:type_name -> go.micro.srv.master.ResponseError
	2,   // 58: go.micro.srv.master.ResponseContact.Contact:type_name -> go.micro.srv.master.ContactProto
	21,  // 59: go.micro.srv.master.ResponseContact.Errors:type_name -> go.micro.srv.master.ResponseError
	5,   // 60: go.micro.srv.master.RequestAddress.Address:type_name -> go.micro.srv.master.AddressProto
	5,   // 61: go.micro.srv.master.ResponseAddress.Address:type_name -> go.micro.srv.master.AddressProto
	21,  // 62: go.micro.srv.master.ResponseAddress.Errors:type_name -> go.micro.srv.master.ResponseError
	6,   // 63: go.micro.srv.master.RequestCompany.Company:type_name -> go.micro.srv.master.CompanyProto
	3,   // 64: go.micro.srv.master.RequestAddressType.AddressType:type_name -> go.micro.srv.master.AddressTypeProto
	3,   // 65: go.micro.srv.master.ResponseAddressType.AddressType:type_name -> go.micro.srv.master.AddressTypeProto
	21,  // 66: go.micro.srv.master.ResponseAddressType.Errors:type_name -> go.micro.srv.master.ResponseError
	4,   // 67: go.micro.srv.master.RequestRegion.Region:type_name -> go.micro.srv.master.RegionProto
	4,   // 68: go.micro.srv.master.ResponseRegion.Region:type_name -> go.micro.srv.master.RegionProto
	21,  // 69: go.micro.srv.master.ResponseRegion.Errors:type_name -> go.micro.srv.master.ResponseError
	0,   // 70: go.micro.srv.master.RequestState.State:type_name -> go.micro.srv.master.StateProto
	0,   // 71: go.micro.srv.master.ResponseState.State:type_name -> go.micro.srv.master.StateProto
	21,  // 72: go.micro.srv.master.ResponseState.Errors:type_name -> go.micro.srv.master.ResponseError
	11,  // 73: go.micro.srv.master.ResponseVehicleAddress.Address:type_name -> go.micro.srv.master.VehicleAddressProto
	21,  // 74: go.micro.srv.master.ResponseVehicleAddress.Errors:type_name -> go.micro.srv.master.ResponseError
	7,   // 75: go.micro.srv.master.RequestVehicleMake.VehicleMake:type_name -> go.micro.srv.master.VehicleMakeProto
	7,   // 76: go.micro.srv.master.ResponseVehicleMake.VehicleMake:type_name -> go.micro.srv.master.VehicleMakeProto
	21,  // 77: go.micro.srv.master.ResponseVehicleMake.Errors:type_name -> go.micro.srv.master.ResponseError
	8,   // 78: go.micro.srv.master.RequestVehicleModel.VehicleModel:type_name -> go.micro.srv.master.VehicleModelProto
	8,   // 79: go.micro.srv.master.ResponseVehicleModel.VehicleModel:type_name -> go.micro.srv.master.VehicleModelProto
	21,  // 80: go.micro.srv.master.ResponseVehicleModel.Errors:type_name -> go.micro.srv.master.ResponseError
	16,  // 81: go.micro.srv.master.RequestVehicleReg.VehicleReg:type_name -> go.micro.srv.master.VehicleTrackRegProto
	16,  // 82: go.micro.srv.master.ResponseVehicleReg.VehicleReg:type_name -> go.micro.srv.master.VehicleTrackRegProto
	21,  // 83: go.micro.srv.master.ResponseVehicleReg.Errors:type_name -> go.micro.srv.master.ResponseError
	10,  // 84: go.micro.srv.master.RequestVehicleStatus.VehicleStatus:type_name -> go.micro.srv.master.VehicleStatusProto
	10,  // 85: go.micro.srv.master.ResponseVehicleStatus.VehicleStatus:type_name -> go.micro.srv.master.VehicleStatusProto
	21,  // 86: go.micro.srv.master.ResponseVehicleStatus.Errors:type_name -> go.micro.srv.master.ResponseError
	15,  // 87: go.micro.srv.master.RequestVehicleOprBound.VehicleOprBound:type_name -> go.micro.srv.master.VehicleOperatorBoundProto
	15,  // 88: go.micro.srv.master.ResponseVehicleOprBound.VehicleOprBound:type_name -> go.micro.srv.master.VehicleOperatorBoundProto
	21,  // 89: go.micro.srv.master.ResponseVehicleOprBound.Errors:type_name -> go.micro.srv.master.ResponseError
	12,  // 90: go.micro.srv.master.RequestOperator.Operator:type_name -> go.micro.srv.master.OperatorProto
	12,  // 91: go.micro.srv.master.ResponseOperator.Operator:type_name -> go.micro.srv.master.OperatorProto
	21,  // 92: go.micro.srv.master.ResponseOperator.Errors:type_name -> go.micro.srv.master.ResponseError
	14,  // 93: go.micro.srv.master.ResponseOperatorContacts.OperatorContacts:type_name -> go.micro.srv.master.OperatorContactsProto
	21,  // 94: go.micro.srv.master.ResponseOperatorContacts.Errors:type_name -> go.micro.srv.master.ResponseError
	13,  // 95: go.micro.srv.master.RequestOperatorLocation.OperatorLocation:type_name -> go.micro.srv.master.OperatorLocationProto
	13,  // 96: go.micro.srv.master.ResponseOperatorLocation.OperatorLocation:type_name -> go.micro.srv.master.OperatorLocationProto
	21,  // 97: go.micro.srv.master.ResponseOperatorLocation.Errors:type_name -> go.micro.srv.master.ResponseError
	9,   // 98: go.micro.srv.master.RequestFleet.Fleet:type_name -> go.micro.srv.master.FleetProto
	9,   // 99: go.micro.srv.master.ResponseFleet.Fleet:type_name -> go.micro.srv.master.FleetProto
	21,  // 100: go.micro.srv.master.ResponseFleet.Errors:type_name -> go.micro.srv.master.ResponseError
	19,  // 101: go.micro.srv.master.ResponseFleetContact.FleetContact:type_name -> go.micro.srv.master.FleetContactProto
	21,  // 102: go.micro.srv.master.ResponseFleetContact.Errors:type_name -> go.micro.srv.master.ResponseError
	20,  // 103: go.micro.srv.master.ResponseFleetLocation.FleetLocation:type_name -> go.micro.srv.master.FleetLocationProto
	21,  // 104: go.micro.srv.master.ResponseFleetLocation.Errors:type_name -> go.micro.srv.master.ResponseError
	36,  // 105: go.micro.srv.master.MasterService.CreateCompany:input_type -> go.micro.srv.master.RequestCompany
	36,  // 106: go.micro.srv.master.MasterService.UpdateCompany:input_type -> go.micro.srv.master.RequestCompany
	31,  // 107: go.micro.srv.master.MasterService.DeleteCompany:input_type -> go.micro.srv.master.RequestDelete
	37,  // 108: go.micro.srv.master.MasterService.CreateAddressType:input_type -> go.micro.srv.master.RequestAddressType
	37,  // 109: go.micro.srv.master.MasterService.UpdateAddressType:input_type -> go.micro.srv.master.RequestAddressType
	31,  // 110: go.micro.srv.master.MasterService.DeleteAddressType:input_type -> go.micro.srv.master.RequestDelete
	29,  // 111: go.micro.srv.master.MasterService.GetAddressTypeById:input_type -> go.micro.srv.master.RequestKey
	34,  // 112: go.micro.srv.master.MasterService.GetAddressTypeByName:input_type -> go.micro.srv.master.RequestByName
	67,  // 113: go.micro.srv.master.MasterService.GetAllAddressTypes:input_type -> google.protobuf.Empty
	34,  // 114: go.micro.srv.master.MasterService.GetAllAddressTypeNames:input_type -> go.micro.srv.master.RequestByName
	39,  // 115: go.micro.srv.master.MasterService.CreateRegion:input_type -> go.micro.srv.master.RequestRegion
	39,  // 116: go.micro.srv.master.MasterService.UpdateRegion:input_type -> go.micro.srv.master.RequestRegion
	31,  // 117: go.micro.srv.master.MasterService.DeleteRegion:input_type -> go.micro.srv.master.RequestDelete
	67,  // 118: go.micro.srv.master.MasterService.GetAllRegion:input_type -> google.protobuf.Empty
	29,  // 119: go.micro.srv.master.MasterService.GetRegionById:input_type -> go.micro.srv.master.RequestKey
	34,  // 120: go.micro.srv.master.MasterService.GetRegionByName:input_type -> go.micro.srv.master.RequestByName
	41,  // 121: go.micro.srv.master.MasterService.CreateState:input_type -> go.micro.srv.master.RequestState
	41,  // 122: go.micro.srv.master.MasterService.UpdateState:input_type -> go.micro.srv.master.RequestState
	31,  // 123: go.micro.srv.master.MasterService.DeleteState:input_type -> go.micro.srv.master.RequestDelete
	29,  // 124: go.micro.srv.master.MasterService.GetStateById:input_type -> go.micro.srv.master.RequestKey
	29,  // 125: go.micro.srv.master.MasterService.GetStateByCountryId:input_type -> go.micro.srv.master.RequestKey
	34,  // 126: go.micro.srv.master.MasterService.GetStateByName:input_type -> go.micro.srv.master.RequestByName
	67,  // 127: go.micro.srv.master.MasterService.GetAllStates:input_type -> google.protobuf.Empty
	27,  // 128: go.micro.srv.master.MasterService.CreateContact:input_type -> go.micro.srv.master.RequestContact
	27,  // 129: go.micro.srv.master.MasterService.UpdateContact:input_type -> go.micro.srv.master.RequestContact
	31,  // 130: go.micro.srv.master.MasterService.DeleteContact:input_type -> go.micro.srv.master.RequestDelete
	29,  // 131: go.micro.srv.master.MasterService.ContactById:input_type -> go.micro.srv.master.RequestKey
	33,  // 132: go.micro.srv.master.MasterService.CreateAddress:input_type -> go.micro.srv.master.RequestAddress
	33,  // 133: go.micro.srv.master.MasterService.UpdateAddress:input_type -> go.micro.srv.master.RequestAddress
	31,  // 134: go.micro.srv.master.MasterService.DeleteAddress:input_type -> go.micro.srv.master.RequestDelete
	29,  // 135: go.micro.srv.master.MasterService.GetAddressById:input_type -> go.micro.srv.master.RequestKey
	34,  // 136: go.micro.srv.master.MasterService.GetAddressByName:input_type -> go.micro.srv.master.RequestByName
	60,  // 137: go.micro.srv.master.MasterService.CreateFleet:input_type -> go.micro.srv.master.RequestFleet
	60,  // 138: go.micro.srv.master.MasterService.UpdateFleet:input_type -> go.micro.srv.master.RequestFleet
	31,  // 139: go.micro.srv.master.MasterService.DeleteFleet:input_type -> go.micro.srv.master.RequestDelete
	29,  // 140: go.micro.srv.master.MasterService.GetFleetById:input_type -> go.micro.srv.master.RequestKey
	62,  // 141: go.micro.srv.master.MasterService.CreateFleetContact:input_type -> go.micro.srv.master.RequestFleetContact
	62,  // 142: go.micro.srv.master.MasterService.UpdateFleetContact:input_type -> go.micro.srv.master.RequestFleetContact
	31,  // 143: go.micro.srv.master.MasterService.DeleteFleetContact:input_type -> go.micro.srv.master.RequestDelete
	29,  // 144: go.micro.srv.master.MasterService.GetContactByFleetId:input_type -> go.micro.srv.master.RequestKey
	64,  // 145: go.micro.srv.master.MasterService.CreateFleetLocation:input_type -> go.micro.srv.master.RequestFleetLocation
	64,  // 146: go.micro.srv.master.MasterService.UpdateFleetLocation:input_type -> go.micro.srv.master.RequestFleetLocation
	31,  // 147: go.micro.srv.master.MasterService.DeleteFleetLocation:input_type -> go.micro.srv.master.RequestDelete
	29,  // 148: go.micro.srv.master.MasterService.GetLocationByFleetId:input_type -> go.micro.srv.master.RequestKey
	54,  // 149: go.micro.srv.master.MasterService.CreateOperator:input_type -> go.micro.srv.master.RequestOperator
	54,  // 150: go.micro.srv.master.MasterService.UpdateOperator:input_type -> go.micro.srv.master.RequestOperator
	31,  // 151: go.micro.srv.master.MasterService.DeleteOperator:input_type -> go.micro.srv.master.RequestDelete
	29,  // 152: go.micro.srv.master.MasterService.GetOperatorById:input_type -> go.micro.srv.master.RequestKey
	29,  // 153: go.micro.srv.master.MasterService.GetOperatorsByVehicleId:input_type -> go.micro.srv.master.RequestKey
	56,  // 154: go.micro.srv.master.MasterService.CreateOperatorContact:input_type -> go.micro.srv.master.RequestOperatorContact
	56,  // 155: go.micro.srv.master.MasterService.UpdateOperatorContact:input_type -> go.micro.srv.master.RequestOperatorContact
	31,  // 156: go.micro.srv.master.MasterService.DeleteOperatorContact:input_type -> go.micro.srv.master.RequestDelete
	29,  // 157: go.micro.srv.master.MasterService.GetAllContactsByOperator:input_type -> go.micro.srv.master.RequestKey
	58,  // 158: go.micro.srv.master.MasterService.CreateOperatorLocation:input_type -> go.micro.srv.master.RequestOperatorLocation
	58,  // 159: go.micro.srv.master.MasterService.UpdateOperatorLocation:input_type -> go.micro.srv.master.RequestOperatorLocation
	31,  // 160: go.micro.srv.master.MasterService.DeleteOperatorLocation:input_type -> go.micro.srv.master.RequestDelete
	29,  // 161: go.micro.srv.master.MasterService.GetOperatorLocationByOperator:input_type -> go.micro.srv.master.RequestKey
	25,  // 162: go.micro.srv.master.MasterService.CreateVehicle:input_type -> go.micro.srv.master.RequestVehicle
	25,  // 163: go.micro.srv.master.MasterService.UpdateVehicle:input_type -> go.micro.srv.master.RequestVehicle
	31,  // 164: go.micro.srv.master.MasterService.DeleteVehicle:input_type -> go.micro.srv.master.RequestDelete
	29,  // 165: go.micro.srv.master.MasterService.GetVehicleById:input_type -> go.micro.srv.master.RequestKey
	34,  // 166: go.micro.srv.master.MasterService.GetVehicleByRegistration:input_type -> go.micro.srv.master.RequestByName
	29,  // 167: go.micro.srv.master.MasterService.GetVehiclesByFleetId:input_type -> go.micro.srv.master.RequestKey
	23,  // 168: go.micro.srv.master.MasterService.CreateVehicleHistory:input_type -> go.micro.srv.master.RequestVehicleHistory
	23,  // 169: go.micro.srv.master.MasterService.UpdateVehicleHistory:input_type -> go.micro.srv.master.RequestVehicleHistory
	31,  // 170: go.micro.srv.master.MasterService.DeleteVehicleHistory:input_type -> go.micro.srv.master.RequestDelete
	29,  // 171: go.micro.srv.master.MasterService.GetVehicleHistoryByVehicleId:input_type -> go.micro.srv.master.RequestKey
	22,  // 172: go.micro.srv.master.MasterService.CreateVehicleLocation:input_type -> go.micro.srv.master.RequestVehicleAddress
	22,  // 173: go.micro.srv.master.MasterService.UpdateVehicleLocation:input_type -> go.micro.srv.master.RequestVehicleAddress
	31,  // 174: go.micro.srv.master.MasterService.DeleteVehicleLocation:input_type -> go.micro.srv.master.RequestDelete
	29,  // 175: go.micro.srv.master.MasterService.GetVehicleLocationByVehicle:input_type -> go.micro.srv.master.RequestKey
	44,  // 176: go.micro.srv.master.MasterService.CreateVehicleMake:input_type -> go.micro.srv.master.RequestVehicleMake
	44,  // 177: go.micro.srv.master.MasterService.UpdateVehicleMake:input_type -> go.micro.srv.master.RequestVehicleMake
	31,  // 178: go.micro.srv.master.MasterService.DeleteVehicleMake:input_type -> go.micro.srv.master.RequestDelete
	67,  // 179: go.micro.srv.master.MasterService.GetAllVehicleMake:input_type -> google.protobuf.Empty
	29,  // 180: go.micro.srv.master.MasterService.GetVehicleMakeById:input_type -> go.micro.srv.master.RequestKey
	46,  // 181: go.micro.srv.master.MasterService.CreateVehicleModel:input_type -> go.micro.srv.master.RequestVehicleModel
	46,  // 182: go.micro.srv.master.MasterService.UpdateVehicleModel:input_type -> go.micro.srv.master.RequestVehicleModel
	31,  // 183: go.micro.srv.master.MasterService.DeleteVehicleModel:input_type -> go.micro.srv.master.RequestDelete
	29,  // 184: go.micro.srv.master.MasterService.GetAllModelByMake:input_type -> go.micro.srv.master.RequestKey
	29,  // 185: go.micro.srv.master.MasterService.GetModelById:input_type -> go.micro.srv.master.RequestKey
	48,  // 186: go.micro.srv.master.MasterService.CreateVehicleReg:input_type -> go.micro.srv.master.RequestVehicleReg
	48,  // 187: go.micro.srv.master.MasterService.UpdateVehicleReg:input_type -> go.micro.srv.master.RequestVehicleReg
	31,  // 188: go.micro.srv.master.MasterService.DeleteVehicleReg:input_type -> go.micro.srv.master.RequestDelete
	29,  // 189: go.micro.srv.master.MasterService.GetAllRegistrationsByVehicleId:input_type -> go.micro.srv.master.RequestKey
	29,  // 190: go.micro.srv.master.MasterService.GetActiveRegistrationsByVehicleId:input_type -> go.micro.srv.master.RequestKey
	50,  // 191: go.micro.srv.master.MasterService.CreateVehicleStatus:input_type -> go.micro.srv.master.RequestVehicleStatus
	50,  // 192: go.micro.srv.master.MasterService.UpdateVehicleStatus:input_type -> go.micro.srv.master.RequestVehicleStatus
	31,  // 193: go.micro.srv.master.MasterService.DeleteVehicleStatus:input_type -> go.micro.srv.master.RequestDelete
	67,  // 194: go.micro.srv.master.MasterService.GetAllVehicleStatus:input_type -> google.protobuf.Empty
	52,  // 195: go.micro.srv.master.MasterService.CreateVehicleOpBound:input_type -> go.micro.srv.master.RequestVehicleOprBound
	52,  // 196: go.micro.srv.master.MasterService.UpdateVehicleOpBound:input_type -> go.micro.srv.master.RequestVehicleOprBound
	31,  // 197: go.micro.srv.master.MasterService.DeleteVehicleOpBound:input_type -> go.micro.srv.master.RequestDelete
	28,  // 198: go.micro.srv.master.MasterService.CreateCompany:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 199: go.micro.srv.master.MasterService.UpdateCompany:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 200: go.micro.srv.master.MasterService.DeleteCompany:output_type -> go.micro.srv.master.ResponseSuccess
	28,  // 201: go.micro.srv.master.MasterService.CreateAddressType:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 202: go.micro.srv.master.MasterService.UpdateAddressType:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 203: go.micro.srv.master.MasterService.DeleteAddressType:output_type -> go.micro.srv.master.ResponseSuccess
	38,  // 204: go.micro.srv.master.MasterService.GetAddressTypeById:output_type -> go.micro.srv.master.ResponseAddressType
	38,  // 205: go.micro.srv.master.MasterService.GetAddressTypeByName:output_type -> go.micro.srv.master.ResponseAddressType
	38,  // 206: go.micro.srv.master.MasterService.GetAllAddressTypes:output_type -> go.micro.srv.master.ResponseAddressType
	38,  // 207: go.micro.srv.master.MasterService.GetAllAddressTypeNames:output_type -> go.micro.srv.master.ResponseAddressType
	28,  // 208: go.micro.srv.master.MasterService.CreateRegion:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 209: go.micro.srv.master.MasterService.UpdateRegion:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 210: go.micro.srv.master.MasterService.DeleteRegion:output_type -> go.micro.srv.master.ResponseSuccess
	40,  // 211: go.micro.srv.master.MasterService.GetAllRegion:output_type -> go.micro.srv.master.ResponseRegion
	40,  // 212: go.micro.srv.master.MasterService.GetRegionById:output_type -> go.micro.srv.master.ResponseRegion
	40,  // 213: go.micro.srv.master.MasterService.GetRegionByName:output_type -> go.micro.srv.master.ResponseRegion
	28,  // 214: go.micro.srv.master.MasterService.CreateState:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 215: go.micro.srv.master.MasterService.UpdateState:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 216: go.micro.srv.master.MasterService.DeleteState:output_type -> go.micro.srv.master.ResponseSuccess
	42,  // 217: go.micro.srv.master.MasterService.GetStateById:output_type -> go.micro.srv.master.ResponseState
	42,  // 218: go.micro.srv.master.MasterService.GetStateByCountryId:output_type -> go.micro.srv.master.ResponseState
	42,  // 219: go.micro.srv.master.MasterService.GetStateByName:output_type -> go.micro.srv.master.ResponseState
	42,  // 220: go.micro.srv.master.MasterService.GetAllStates:output_type -> go.micro.srv.master.ResponseState
	28,  // 221: go.micro.srv.master.MasterService.CreateContact:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 222: go.micro.srv.master.MasterService.UpdateContact:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 223: go.micro.srv.master.MasterService.DeleteContact:output_type -> go.micro.srv.master.ResponseSuccess
	32,  // 224: go.micro.srv.master.MasterService.ContactById:output_type -> go.micro.srv.master.ResponseContact
	28,  // 225: go.micro.srv.master.MasterService.CreateAddress:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 226: go.micro.srv.master.MasterService.UpdateAddress:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 227: go.micro.srv.master.MasterService.DeleteAddress:output_type -> go.micro.srv.master.ResponseSuccess
	35,  // 228: go.micro.srv.master.MasterService.GetAddressById:output_type -> go.micro.srv.master.ResponseAddress
	35,  // 229: go.micro.srv.master.MasterService.GetAddressByName:output_type -> go.micro.srv.master.ResponseAddress
	28,  // 230: go.micro.srv.master.MasterService.CreateFleet:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 231: go.micro.srv.master.MasterService.UpdateFleet:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 232: go.micro.srv.master.MasterService.DeleteFleet:output_type -> go.micro.srv.master.ResponseSuccess
	61,  // 233: go.micro.srv.master.MasterService.GetFleetById:output_type -> go.micro.srv.master.ResponseFleet
	28,  // 234: go.micro.srv.master.MasterService.CreateFleetContact:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 235: go.micro.srv.master.MasterService.UpdateFleetContact:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 236: go.micro.srv.master.MasterService.DeleteFleetContact:output_type -> go.micro.srv.master.ResponseSuccess
	63,  // 237: go.micro.srv.master.MasterService.GetContactByFleetId:output_type -> go.micro.srv.master.ResponseFleetContact
	28,  // 238: go.micro.srv.master.MasterService.CreateFleetLocation:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 239: go.micro.srv.master.MasterService.UpdateFleetLocation:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 240: go.micro.srv.master.MasterService.DeleteFleetLocation:output_type -> go.micro.srv.master.ResponseSuccess
	65,  // 241: go.micro.srv.master.MasterService.GetLocationByFleetId:output_type -> go.micro.srv.master.ResponseFleetLocation
	28,  // 242: go.micro.srv.master.MasterService.CreateOperator:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 243: go.micro.srv.master.MasterService.UpdateOperator:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 244: go.micro.srv.master.MasterService.DeleteOperator:output_type -> go.micro.srv.master.ResponseSuccess
	55,  // 245: go.micro.srv.master.MasterService.GetOperatorById:output_type -> go.micro.srv.master.ResponseOperator
	55,  // 246: go.micro.srv.master.MasterService.GetOperatorsByVehicleId:output_type -> go.micro.srv.master.ResponseOperator
	28,  // 247: go.micro.srv.master.MasterService.CreateOperatorContact:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 248: go.micro.srv.master.MasterService.UpdateOperatorContact:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 249: go.micro.srv.master.MasterService.DeleteOperatorContact:output_type -> go.micro.srv.master.ResponseSuccess
	57,  // 250: go.micro.srv.master.MasterService.GetAllContactsByOperator:output_type -> go.micro.srv.master.ResponseOperatorContacts
	28,  // 251: go.micro.srv.master.MasterService.CreateOperatorLocation:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 252: go.micro.srv.master.MasterService.UpdateOperatorLocation:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 253: go.micro.srv.master.MasterService.DeleteOperatorLocation:output_type -> go.micro.srv.master.ResponseSuccess
	59,  // 254: go.micro.srv.master.MasterService.GetOperatorLocationByOperator:output_type -> go.micro.srv.master.ResponseOperatorLocation
	28,  // 255: go.micro.srv.master.MasterService.CreateVehicle:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 256: go.micro.srv.master.MasterService.UpdateVehicle:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 257: go.micro.srv.master.MasterService.DeleteVehicle:output_type -> go.micro.srv.master.ResponseSuccess
	26,  // 258: go.micro.srv.master.MasterService.GetVehicleById:output_type -> go.micro.srv.master.ResponseVehicle
	26,  // 259: go.micro.srv.master.MasterService.GetVehicleByRegistration:output_type -> go.micro.srv.master.ResponseVehicle
	26,  // 260: go.micro.srv.master.MasterService.GetVehiclesByFleetId:output_type -> go.micro.srv.master.ResponseVehicle
	28,  // 261: go.micro.srv.master.MasterService.CreateVehicleHistory:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 262: go.micro.srv.master.MasterService.UpdateVehicleHistory:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 263: go.micro.srv.master.MasterService.DeleteVehicleHistory:output_type -> go.micro.srv.master.ResponseSuccess
	24,  // 264: go.micro.srv.master.MasterService.GetVehicleHistoryByVehicleId:output_type -> go.micro.srv.master.ResponseVehicleHistory
	28,  // 265: go.micro.srv.master.MasterService.CreateVehicleLocation:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 266: go.micro.srv.master.MasterService.UpdateVehicleLocation:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 267: go.micro.srv.master.MasterService.DeleteVehicleLocation:output_type -> go.micro.srv.master.ResponseSuccess
	43,  // 268: go.micro.srv.master.MasterService.GetVehicleLocationByVehicle:output_type -> go.micro.srv.master.ResponseVehicleAddress
	28,  // 269: go.micro.srv.master.MasterService.CreateVehicleMake:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 270: go.micro.srv.master.MasterService.UpdateVehicleMake:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 271: go.micro.srv.master.MasterService.DeleteVehicleMake:output_type -> go.micro.srv.master.ResponseSuccess
	45,  // 272: go.micro.srv.master.MasterService.GetAllVehicleMake:output_type -> go.micro.srv.master.ResponseVehicleMake
	45,  // 273: go.micro.srv.master.MasterService.GetVehicleMakeById:output_type -> go.micro.srv.master.ResponseVehicleMake
	28,  // 274: go.micro.srv.master.MasterService.CreateVehicleModel:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 275: go.micro.srv.master.MasterService.UpdateVehicleModel:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 276: go.micro.srv.master.MasterService.DeleteVehicleModel:output_type -> go.micro.srv.master.ResponseSuccess
	47,  // 277: go.micro.srv.master.MasterService.GetAllModelByMake:output_type -> go.micro.srv.master.ResponseVehicleModel
	47,  // 278: go.micro.srv.master.MasterService.GetModelById:output_type -> go.micro.srv.master.ResponseVehicleModel
	28,  // 279: go.micro.srv.master.MasterService.CreateVehicleReg:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 280: go.micro.srv.master.MasterService.UpdateVehicleReg:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 281: go.micro.srv.master.MasterService.DeleteVehicleReg:output_type -> go.micro.srv.master.ResponseSuccess
	49,  // 282: go.micro.srv.master.MasterService.GetAllRegistrationsByVehicleId:output_type -> go.micro.srv.master.ResponseVehicleReg
	49,  // 283: go.micro.srv.master.MasterService.GetActiveRegistrationsByVehicleId:output_type -> go.micro.srv.master.ResponseVehicleReg
	28,  // 284: go.micro.srv.master.MasterService.CreateVehicleStatus:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 285: go.micro.srv.master.MasterService.UpdateVehicleStatus:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 286: go.micro.srv.master.MasterService.DeleteVehicleStatus:output_type -> go.micro.srv.master.ResponseSuccess
	51,  // 287: go.micro.srv.master.MasterService.GetAllVehicleStatus:output_type -> go.micro.srv.master.ResponseVehicleStatus
	28,  // 288: go.micro.srv.master.MasterService.CreateVehicleOpBound:output_type -> go.micro.srv.master.ResponseCreateSuccess
	30,  // 289: go.micro.srv.master.MasterService.UpdateVehicleOpBound:output_type -> go.micro.srv.master.ResponseSuccess
	30,  // 290: go.micro.srv.master.MasterService.DeleteVehicleOpBound:output_type -> go.micro.srv.master.ResponseSuccess
	198, // [198:291] is the sub-list for method output_type
	105, // [105:198] is the sub-list for method input_type
	105, // [105:105] is the sub-list for extension type_name
	105, // [105:105] is the sub-list for extension extendee
	0,   // [0:105] is the sub-list for field type_name
}

func init() { file_master_proto_init() }
func file_master_proto_init() {
	if File_master_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_master_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressTypeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleMakeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleModelProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleetProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleStatusProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleAddressProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorLocationProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorContactsProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleOperatorBoundProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleTrackRegProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleHistoryProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleetContactProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleetLocationProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestVehicleAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestVehicleHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseVehicleHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestVehicle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseVehicle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCreateSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestByName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseVehicleAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestVehicleMake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseVehicleMake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestVehicleModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseVehicleModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestVehicleReg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseVehicleReg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestVehicleStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseVehicleStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestVehicleOprBound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseVehicleOprBound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestOperatorContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseOperatorContacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestOperatorLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseOperatorLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestFleet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseFleet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestFleetContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseFleetContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestFleetLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseFleetLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_master_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_master_proto_goTypes,
		DependencyIndexes: file_master_proto_depIdxs,
		MessageInfos:      file_master_proto_msgTypes,
	}.Build()
	File_master_proto = out.File
	file_master_proto_rawDesc = nil
	file_master_proto_goTypes = nil
	file_master_proto_depIdxs = nil
}
